{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"2024.1 - Minecraft","text":"<p>Este reposit\u00f3rio cont\u00e9m a recria\u00e7\u00e3o do jogo Minecraft no estilo MUD (Multi-User Dungeon), desenvolvida como parte da disciplina de Sistemas de Bancos de Dados 1, na Universidade de Bras\u00edlia. </p>"},{"location":"#equipe","title":"Equipe","text":"<p>Arthur Carneiro Trindade</p> <p>180098080</p> <p>Bruno Ricardo de Menezes</p> <p>221007680</p> <p>Miguel Moreira da Silva de Oliveira</p> <p>202023968</p>"},{"location":"#jogo","title":"Jogo","text":"<p>No mundo de Minecraft, o jogador inicia sua jornada em um ambiente vasto e gerado aleatoriamente, repleto de biomas diversos como florestas, montanhas, desertos e oceanos. A principal miss\u00e3o \u00e9 sobreviver, coletando recursos naturais como madeira, pedra e metais para criar ferramentas, construir abrigos e enfrentar monstros que surgem \u00e0 noite.</p> <p>Conforme o jogador avan\u00e7a, ele pode explorar cavernas e minas em busca de materiais raros, criar equipamentos mais avan\u00e7ados e at\u00e9 construir estruturas complexas. A viagem tamb\u00e9m leva o jogador a outros reinos, como o Nether, um mundo infernal cheio de perigos e tesouros.</p> <p>A jornada culmina na busca pelo Ender Dragon, o chefe final do jogo, localizado em uma dimens\u00e3o chamada The End. Para chegar l\u00e1, o jogador precisa encontrar e ativar um portal escondido em uma fortaleza subterr\u00e2nea. A batalha contra o Ender Dragon \u00e9 intensa e requer prepara\u00e7\u00e3o meticulosa, mas derrot\u00e1-lo marca a conclus\u00e3o \u00e9pica da aventura, embora o jogo continue oferecendo in\u00fameras possibilidades de explora\u00e7\u00e3o e constru\u00e7\u00e3o.</p>"},{"location":"#como-rodar-o-jogo","title":"Como Rodar o Jogo","text":""},{"location":"#1-instale-o-docker","title":"1. Instale o Docker","text":"<p>Primeiro, \u00e9 necess\u00e1rio instalar o Docker(27.0.3). Voc\u00ea pode fazer isso acessando o seguinte link: Instalar Docker.</p>"},{"location":"#2-clone-o-repositorio","title":"2. Clone o Reposit\u00f3rio","text":"<p>Ap\u00f3s instalar o Docker, clone o reposit\u00f3rio do jogo usando o comando abaixo:</p> <pre><code>git clone https://github.com/SBD1/2024.1-Minecraft.git\n</code></pre>"},{"location":"#3-acesse-o-diretorio-do-jogo","title":"3. Acesse o Diret\u00f3rio do Jogo","text":"<p>Depois de clonar o reposit\u00f3rio, entre no diret\u00f3rio do jogo com o seguinte comando:</p> <pre><code>cd 2024.1-Minecraft\n</code></pre>"},{"location":"#4-acesse-o-diretorio-docker","title":"4. Acesse o Diret\u00f3rio Docker","text":"<p>Agora que voc\u00ea est\u00e1 dentro da pasta do jogo, \u00e9 necess\u00e1rio acessar a pasta do Docker:</p> <pre><code>cd Docker\n</code></pre>"},{"location":"#5-suba-o-container-docker","title":"5. Suba o Container Docker","text":"<p>Dentro da pasta Docker, suba e entre no container com os comandos:</p> <pre><code>docker-compose up -d --build\ndocker exec -it python_app bash\n</code></pre> <p>O Docker \u00e9 uma ferramenta poderosa porque garante que o jogo rodar\u00e1 em um ambiente consistente, evitando problemas de vers\u00f5es ou depend\u00eancias.</p>"},{"location":"#6-rode-o-jogo","title":"6. Rode o Jogo","text":"<p>Com todas as depend\u00eancias instaladas no container, rode o jogo usando:</p> <pre><code>python main.py\n</code></pre>"},{"location":"#7-finalize-o-jogo","title":"7. Finalize o Jogo","text":"<p>Quando terminar de jogar, finalize o jogo pressionando Ctrl + C.</p>"},{"location":"#8-saia-do-container","title":"8. Saia do Container","text":"<p>Saia do container do Docker digitando:</p> <pre><code>exit\n</code></pre>"},{"location":"#9-encerre-o-container","title":"9. Encerre o Container","text":"<p>Por fim, n\u00e3o se esque\u00e7a de encerrar o container do Docker com:</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"#tenha-uma-otima-diversao","title":"Tenha uma \u00f3tima divers\u00e3o!","text":""},{"location":"apresentacoes/","title":"Apresenta\u00e7\u00f5es","text":""},{"location":"apresentacoes/#entrega-modulo-1","title":"Entrega M\u00f3dulo 1","text":"<p> Apresenta\u00e7\u00e3o M\u00f3dulo 1 </p>"},{"location":"apresentacoes/#entrega-modulo-2","title":"Entrega M\u00f3dulo 2","text":"<p> Apresenta\u00e7\u00e3o M\u00f3dulo 2 </p>"},{"location":"apresentacoes/#entrega-modulo-3","title":"Entrega M\u00f3dulo 3","text":"<p> Apresenta\u00e7\u00e3o M\u00f3dulo 3 </p>"},{"location":"modulo_1/der/","title":"Diagrama Entidade-Relacionamento","text":""},{"location":"modulo_1/der/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O Diagrama Entidade-Relacionamento \u00e9 uma representa\u00e7\u00e3o gr\u00e1fica que descreve a estrutura l\u00f3gica de um banco de dados. O DER \u00e9 utilizado como um modelo conceitual, isso significa que ele se concentra em representar conceitos do mundo real de maneira abstrata, mas pr\u00f3xima da realidade. As entidades, como jogadores, mundos, itens e miss\u00f5es, s\u00e3o definidas de acordo com seus significados e caracter\u00edsticas no jogo. </p> <p>O foco do modelo conceitual \u00e9, portanto, na sem\u00e2ntica, ou seja, no significado e no contexto dos dados que ser\u00e3o armazenados, e sua principal fun\u00e7\u00e3o \u00e9 facilitar a transi\u00e7\u00e3o para o modelo l\u00f3gico, que \u00e9 uma representa\u00e7\u00e3o mais detalhada e t\u00e9cnica do banco de dados.</p> <p>A seguir, apresentamos o DER elaborado, detalhando as entidades envolvidas e seus respectivos relacionamentos.</p>"},{"location":"modulo_1/der/#diagrama","title":"Diagrama","text":"<p>Autores: Arthur Carneiro Trindade, Bruno Ricardo de Menezes e Miguel Moreira da Silva de Oliveira, 2024.</p>"},{"location":"modulo_1/der/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o <code>1.0</code> 20/07/2024 Vers\u00e3o incial do DER Arthur Carneiro Trindade Bruno Ricardo de MenezesMiguel Moreira da Silva de Oliveira <code>1.1</code> 21/07/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 1.0 do DER Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira <code>1.2</code> 21/07/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 1.1 do DER Arthur Carneiro Trindade Bruno Ricardo de MenezesMiguel Moreira da Silva de Oliveira <code>1.3</code> 21/07/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 1.2 do DER Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira <code>2.0</code> 29/07/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 1.3 do DER Miguel Moreira da Silva de Oliveira Arthur Carneiro TrindadeBruno Ricardo de Menezes <code>2.1</code> 03/08/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 2.0 do DER Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira <code>2.2</code> 04/08/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 2.1 do DER Arthur Carneiro Trindade Bruno Ricardo de MenezesMiguel Moreira da Silva de Oliveira <code>2.3</code> 06/08/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 2.2 do DER Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira Bruno Ricardo de Menezes <code>2.4</code> 09/08/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 2.3 do DER Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira <code>3.0</code> 09/08/2024 Vers\u00e3o Final do DER Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira"},{"location":"modulo_1/dicDados/","title":"Dicion\u00e1rio de dados","text":""},{"location":"modulo_1/dicDados/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O Dicion\u00e1rio de Dados \u00e9 uma descri\u00e7\u00e3o detalhada dos elementos que comp\u00f5em o banco de dados, fornecendo informa\u00e7\u00f5es sobre cada atributo e suas caracter\u00edsticas. Ele serve como uma refer\u00eancia centralizada para desenvolvedores, administradores e usu\u00e1rios, garantindo uma compreens\u00e3o clara dos dados armazenados e de como devem ser utilizados.</p> <p>O dicion\u00e1rio de dados desse projeto inclui as seguintes colunas:</p> <ul> <li>Nome: O nome do atributo no banco de dados.</li> <li>Descri\u00e7\u00e3o: Uma descri\u00e7\u00e3o detalhada do que o atributo ou entidade representa e sua fun\u00e7\u00e3o no contexto do jogo.</li> <li>Tipo de Dado: O tipo de dado que o atributo armazenar\u00e1, como inteiro, texto, data, etc.</li> <li>Tamanho: O comprimento m\u00e1ximo ou a capacidade do dado.</li> <li>Restri\u00e7\u00f5es de Dom\u00ednio: As regras e restri\u00e7\u00f5es que limitam os valores que o atributo pode assumir, como valores poss\u00edveis, valores obrigat\u00f3rios, ou restri\u00e7\u00f5es de unicidade.</li> </ul> <p>A seguir, apresentamos o dicion\u00e1rio de dados completo.</p>"},{"location":"modulo_1/dicDados/#dicionario-de-dados_1","title":"Dicion\u00e1rio de Dados","text":""},{"location":"modulo_1/dicDados/#dicionario-de-dados_2","title":"Dicion\u00e1rio de Dados","text":""},{"location":"modulo_1/dicDados/#tabelas-entidade","title":"Tabelas Entidade","text":""},{"location":"modulo_1/dicDados/#mapa","title":"Mapa","text":"<p>A entidade Mapa descreve o mundo do MUD. Essa entidade \u00e9 identificada pelo seu nome, al\u00e9m disso, ela possui um atributo hora, representando o ciclo de dia e noite dentro do jogo.</p> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica o mapa. VARCHAR 30 PRIMARY KEY hora Representa o ciclo de dia e noite no jogo. ciclo_dia --- NOT NULL"},{"location":"modulo_1/dicDados/#chunk","title":"Chunk","text":"<p>A entidade Chunk representa os blocos que comp\u00f5em o mapa. O mapa \u00e9 estruturado como uma matriz, onde cada chunk corresponde a uma c\u00e9lula. Chunks s\u00e3o identificados por um n\u00famero sequencial, que varia de 0 at\u00e9 o tamanho total do mapa, numerados da esquerda superior para a direita inferior. Al\u00e9m disso, cada chunk est\u00e1 associado a um bioma espec\u00edfico e possui um identificador que o vincula ao nome do mapa ao qual pertence. A entidade Chunk \u00e9 uma das entidades centrais do jogo pois serve como ponto de interse\u00e7\u00e3o entre v\u00e1rias outras entidades, estabelecendo conex\u00f5es importantes dentro da estrutura do jogo.</p> <ul> <li>Observa\u00e7\u00e3o: Essa tabela possui chave estrangeira para a entidade Mapa e Bioma.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio numero N\u00famero sequencial que identifica o chunk. INT --- PRIMARY KEY nome_bioma Nome do bioma ao qual o chunk pertence. VARCHAR 30 FOREIGN KEY, NOT NULL nome_mapa Nome do mapa ao qual o chunk pertence. VARCHAR 30 FOREIGN KEY, NOT NULL PRIMARY KEY (numero, nome_mapa) --- --- ---"},{"location":"modulo_1/dicDados/#construivel","title":"Constru\u00edvel","text":"<p>A entidade Constru\u00edvel descreve estruturas constru\u00edveis pelo jogador. Essas estruturas s\u00e3o identificadas por um nome espec\u00edfico, possuem uma receita de constru\u00e7\u00e3o pr\u00f3pria e desempenham uma funcionalidade particular dentro do jogo.</p> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica o constru\u00edvel. VARCHAR 30 PRIMARY KEY descricao Receita da constru\u00e7\u00e3o. TEXT --- NOT NULL"},{"location":"modulo_1/dicDados/#item","title":"Item","text":"<p>A entidade Item descreve todos os itens dispon\u00edveis no jogo. Todos os itens podem ser identificados pelo seu nome \u00fanico, e cada item pode ser especializado em Material, Craft\u00e1vel e Alimento.</p> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica o item. VARCHAR 30 PRIMARY KEY tipo_item Tipo de especializa\u00e7\u00e3o do item tipo_item --- NOT NULL"},{"location":"modulo_1/dicDados/#alimento","title":"Alimento","text":"<p>A entidade Alimento refere-se aos itens consum\u00edveis do jogo, que restauram pontos de fome do jogador ao serem ingeridos. Esses itens podem ser obtidos por meio de drops de mobs ou pela explora\u00e7\u00e3o de fontes.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_item Nome do item que \u00e9 um alimento. VARCHAR 30 PRIMARY KEY, FOREIGN KEY pts_fome Indica quantos pontos de fome do jogador o alimento restaura. INT --- NOT NULL"},{"location":"modulo_1/dicDados/#craftavel","title":"Craft\u00e1vel","text":"<p>A entidade Craft\u00e1vel descreve os itens que podem ser fabricados pelo jogador dentro do jogo. Esses itens possuem receitas espec\u00edficas de fabrica\u00e7\u00e3o e podem ser especializados em Funcional, Ferramenta Dur\u00e1vel e Armadura Dur\u00e1vel.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_item Nome do item que \u00e9 craft\u00e1vel. VARCHAR 30 PRIMARY KEY, FOREIGN KEY tipo_craftavel Tipo de especializa\u00e7\u00e3o do item craft\u00e1vel. tipo_craftavel --- NOT NULL"},{"location":"modulo_1/dicDados/#funcional","title":"Funcional","text":"<p>A entidade Funcional representa os itens que desempenham uma funcionalidade espec\u00edfica. Cada item funcional possui uma fun\u00e7\u00e3o distinta e \u00fanica.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Craft\u00e1vel.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_item Nome do item que \u00e9 funcional. VARCHAR 30 PRIMARY KEY, FOREIGN KEY funcao Descreve a fun\u00e7\u00e3o espec\u00edfica do item. TEXT --- NOT NULL"},{"location":"modulo_1/dicDados/#ferramenta-duravel","title":"Ferramenta Dur\u00e1vel","text":"<p>A entidade Ferramenta Dur\u00e1vel representa os itens que os jogadores utilizam para executar diversas a\u00e7\u00f5es, como minerar recursos e atacar mobs. As ferramentas t\u00eam uma durabilidade limitada e causam uma quantidade espec\u00edfica de dano quando usadas contra mobs.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Craft\u00e1vel.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_item Nome do item que \u00e9 uma ferramenta. VARCHAR 30 PRIMARY KEY, FOREIGN KEY durabilidade_total Durabilidade total da ferramenta. INT --- NOT NULL pts_dano Pontos de dano que a ferramenta causa em mobs. INT --- NOT NULL"},{"location":"modulo_1/dicDados/#armadura-duravel","title":"Armadura Dur\u00e1vel","text":"<p>A entidade Armadura Dur\u00e1vel representa os itens que os jogadores podem equipar para aumentar sua resist\u00eancia a danos causados por ferramentas e mobs. Assim como as ferramentas, as armaduras possuem durabilidade limitada e oferecem uma quantidade definida de pontos de armadura.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Craft\u00e1vel.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_item Nome do item que \u00e9 uma armadura dur\u00e1vel. VARCHAR 30 PRIMARY KEY, FOREIGN KEY pts_armadura Pontos de armadura que o item fornece ao jogador. INT --- NOT NULL durabilidade_total Durabilidade total da armadura. INT --- NOT NULL"},{"location":"modulo_1/dicDados/#estrutura","title":"Estrutura","text":"<p>A entidade Estrutura descreve as estruturas pr\u00e9-geradas no mapa do jogo. Cada chunk pode abrigar uma dessas estruturas de acordo com a sua probabilidade, que podem ser exploradas pelo jogador em busca de recompensas.</p> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica a estrutura. VARCHAR 30 PRIMARY KEY probabilidade Probabilidade de a estrutura ser gerada em um chunk. DECIMAL(5,2) --- NOT NULL"},{"location":"modulo_1/dicDados/#fonte","title":"Fonte","text":"<p>A entidade Fonte descreve as fontes naturais de recursos dentro do jogo. Cada fonte fornece uma quantidade m\u00e1xima de itens espec\u00edficos que podem ser minerados pelo jogador utilizando ferramentas.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para a entidade Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica a fonte. VARCHAR 30 PRIMARY KEY qtd_max Quantidade m\u00e1xima de itens que a fonte pode fornecer. INT --- NOT NULL nome_item_drop Nome do item que pode ser extra\u00eddo desta fonte. VARCHAR 30 FOREIGN KEY, NOT NULL"},{"location":"modulo_1/dicDados/#bioma","title":"Bioma","text":"<p>A entidade Bioma descreve os diferentes biomas presentes no jogo, identificados por um nome \u00fanico. O bioma determina as caracter\u00edsticas espec\u00edficas de cada chunk no mapa.</p> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica o bioma. VARCHAR 30 PRIMARY KEY"},{"location":"modulo_1/dicDados/#inventario","title":"Invent\u00e1rio","text":"<p>A entidade Invent\u00e1rio representa o invent\u00e1rio do jogador. A tabela Invent\u00e1rio atua como uma tabela intermedi\u00e1ria que resulta da rela\u00e7\u00e3o entre jogador e item. Sendo uma entidade fraca, o invent\u00e1rio \u00e9 identificado exclusivamente pelo ID do jogador que possui os itens nele contidos.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Jogador e Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_inventario Identificador referenciando o jogador que possui o item. INT --- FOREIGN KEY id_inst_item Identificador da inst\u00e2ncia de item possu\u00eddo pelo jogador. INT --- FOREIGN KEY, UNIQUE"},{"location":"modulo_1/dicDados/#jogador","title":"Jogador","text":"<p>A entidade Jogador representa o personagem principal do jogo. Cada inst\u00e2ncia de Jogador possui um identificador \u00fanico, al\u00e9m de diversos atributos que o caracterizam. O jogador conta com quatro atributos espec\u00edficos para equipar itens de armadura. Al\u00e9m disso, o jogador possui chaves estrangeiras que indicam o chunk em que ele se encontra no momento e a miss\u00e3o que est\u00e1 realizando.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Chunk, Miss\u00e3o e Armadura.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_jogador Identificador \u00fanico do jogador. SERIAL --- PRIMARY KEY nome Nome do jogador. VARCHAR 30 NOT NULL fome Quantidade de pontos de fome que o jogador possui em determinado instante. INT --- NOT NULL vida Quantidade de pontos de vida que o jogador possui em determinado instante. INT --- NOT NULL nivel N\u00edvel que o jogador est\u00e1 em determinado instante. INT --- NOT NULL exp Quantidade de experi\u00eancia que um jogador tem em determinado instante. Essa experi\u00eancia poder\u00e1 ser utilizada para reparar as ferramentas. INT --- NOT NULL cabeca Identificador da armadura equipada na cabe\u00e7a. INT --- FOREIGN KEY peito Identificador da armadura equipada no peito. INT --- FOREIGN KEY pernas Identificador da armadura equipada nas pernas. INT --- FOREIGN KEY pes Identificador da armadura equipada nos p\u00e9s. INT --- FOREIGN KEY numero_chunk Identificador do chunk onde o jogador est\u00e1 localizado. INT --- FOREIGN KEY, NOT NULL missao Identificador da miss\u00e3o atual do jogador. INT --- FOREIGN KEY"},{"location":"modulo_1/dicDados/#missao","title":"Miss\u00e3o","text":"<p>A entidade Miss\u00e3o armazena a lista de miss\u00f5es dispon\u00edveis no jogo, que auxiliam o jogador na explora\u00e7\u00e3o do mundo. Cada miss\u00e3o \u00e9 identificada por um ID \u00fanico e segue uma sequ\u00eancia espec\u00edfica de miss\u00f5es. As miss\u00f5es incluem uma descri\u00e7\u00e3o, um objetivo, e oferecem experi\u00eancia e recompensas para o jogador. As miss\u00f5es sequenciais s\u00e3o desbloqueadas e apresentadas ao jogador por meio de uma interface ao interagir com um NPC, embora o NPC atue apenas como uma interface, sem qualquer rela\u00e7\u00e3o direta com a miss\u00e3o em si.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para a entidade Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_missao Identificador \u00fanico da miss\u00e3o. SERIAL --- PRIMARY KEY nome Nome da miss\u00e3o. VARCHAR 30 NOT NULL descricao Descri\u00e7\u00e3o detalhada da miss\u00e3o. TEXT --- NOT NULL objetivo Objetivo que deve ser cumprido pelo jogador para completar a miss\u00e3o. TEXT --- NOT NULL exp Quantidade de experi\u00eancia oferecida pela conclus\u00e3o da miss\u00e3o. INT --- NOT NULL recompensa Recompensa fornecida ao completar a miss\u00e3o. TEXT --- NOT NULL nome_item Identificador do item fornecido como recompensa. VARCHAR 30 FOREIGN KEY"},{"location":"modulo_1/dicDados/#mob","title":"Mob","text":"<p>A entidade Mob representa todas as entidades vivas no jogo, como inimigos e NPCs. Cada mob possui um nome \u00fanico, uma vida m\u00e1xima e uma probabilidade de spawn. Al\u00e9m disso, os mobs podem ser especializados como Agressivos ou Pac\u00edficos, dependendo de seu comportamento no jogo.</p> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome Nome \u00fanico que identifica o mob. VARCHAR 30 PRIMARY KEY tipo_mob Tipo de especializa\u00e7\u00e3o do mob. tipo_mob --- NOT NULL"},{"location":"modulo_1/dicDados/#agressivo","title":"Agressivo","text":"<p>A entidade Agressivo modela os mobs com comportamento agressivo ou neutro. Mobs agressivos possuem pontos de dano que reduzem a vida do jogador quando o atacam. Esses mobs podem ser impulsivos, atacando o jogador sempre que o encontram, ou podem adotar um comportamento reativo, atacando apenas se forem provocados.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Mob.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_mob Nome do mob que \u00e9 agressivo. VARCHAR 30 PRIMARY KEY, FOREIGN KEY impulsivo Determina o comportamento impulsivo do mob. BOOLEAN --- NOT NULL pts_dano Declara a quantidade de dano que o mob causa ao jogador. INT --- NOT NULL"},{"location":"modulo_1/dicDados/#pacifico","title":"Pac\u00edfico","text":"<p>A entidade Pac\u00edfico modela os mobs com comportamento pac\u00edfico. Mobs pac\u00edficos nunca atacam o jogador e podem ser especializados como NPC.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Mob.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_mob Nome do mob que \u00e9 pac\u00edfico. VARCHAR 30 PRIMARY KEY, FOREIGN KEY vida_max Vida m\u00e1xima do mob pac\u00edfico. INT --- NOT NULL tipo_pacifico Tipo de especializa\u00e7\u00e3o do mob pac\u00edfico tipo_pacifico --- NOT NULL"},{"location":"modulo_1/dicDados/#npc","title":"NPC","text":"<p>A entidade NPC modela os mobs pac\u00edficos conhecidos como Alde\u00f5es. Os Alde\u00f5es s\u00e3o os \u00fanicos mobs no jogo que podem oferecer miss\u00f5es, auxiliando o jogador a progredir no fluxo do jogo.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade \u00e9 uma especializa\u00e7\u00e3o da entidade Pac\u00edfico.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_pacifico Nome do mob pac\u00edfico que \u00e9 um NPC. VARCHAR 30 PRIMARY KEY, FOREIGN KEY nome_proprio Nome pr\u00f3prio do NPC (espec\u00edfico para cada inst\u00e2ncia). VARCHAR 30 NOT NULL"},{"location":"modulo_1/dicDados/#tabelas-instancia","title":"Tabelas Inst\u00e2ncia","text":""},{"location":"modulo_1/dicDados/#instancia-construivel","title":"Inst\u00e2ncia Constru\u00edvel","text":"<p>A entidade Inst\u00e2ncia Constru\u00edvel representa as diferentes ocorr\u00eancias da entidade Constru\u00edvel dentro do mapa. Cada inst\u00e2ncia \u00e9 identificada por um ID \u00fanico, permitindo distinguir entre as diversas constru\u00e7\u00f5es presentes no jogo.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Constru\u00edvel e Chunk.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_inst_construivel Identificador \u00fanico da inst\u00e2ncia de constru\u00edvel. SERIAL --- PRIMARY KEY nome_construivel Nome do constru\u00edvel associado a esta inst\u00e2ncia. VARCHAR 30 FOREIGN KEY, NOT NULL numero_chunk N\u00famero do chunk onde esta inst\u00e2ncia est\u00e1 localizada. INT --- FOREIGN KEY, NOT NULL nome_mapa Nome do mapa onde a inst\u00e2ncia est\u00e1 localizada. VARCHAR 30 FOREIGN KEY, NOT NULL"},{"location":"modulo_1/dicDados/#instancia-item","title":"Inst\u00e2ncia Item","text":"<p>A entidade Inst\u00e2ncia Item representa as ocorr\u00eancias espec\u00edficas de itens no jogo. Cada inst\u00e2ncia possui um identificador \u00fanico e uma durabilidade atual. As inst\u00e2ncias de item podem estar armazenadas no invent\u00e1rio de um jogador ou situadas no ch\u00e3o de algum chunk.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Item e Invent\u00e1rio.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_inst_item Identificador \u00fanico da inst\u00e2ncia de item. SERIAL --- PRIMARY KEY nome_item Nome do item associado a esta inst\u00e2ncia. VARCHAR 30 FOREIGN KEY, NOT NULL durabilidade_atual Durabilidade atual do item. INT --- NOT NULL"},{"location":"modulo_1/dicDados/#instancia-estrutura","title":"Inst\u00e2ncia Estrutura","text":"<p>A entidade Inst\u00e2ncia Estrutura representa as ocorr\u00eancias de estruturas pr\u00e9-geradas no jogo. Cada inst\u00e2ncia possui um identificador \u00fanico e o nome da estrutura que representa, al\u00e9m de estar vinculada ao bioma e ao chunk em que est\u00e1 localizada.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Estrutura, Bioma e Chunk.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_inst_estrutura Identificador \u00fanico da inst\u00e2ncia da estrutura. SERIAL --- PRIMARY KEY nome_estrutura Nome da estrutura associada a esta inst\u00e2ncia. VARCHAR 30 FOREIGN KEY, NOT NULL nome_bioma Identificador do bioma onde a estrutura est\u00e1 localizada. VARCHAR 30 FOREIGN KEY, NOT NULL numero_chunk N\u00famero do chunk onde a estrutura est\u00e1 localizada. INT --- FOREIGN KEY, NOT NULL nome_mapa Nome do mapa onde a estrutura est\u00e1 localizada. VARCHAR 30 FOREIGN KEY, NOT NULL"},{"location":"modulo_1/dicDados/#instancia-fonte","title":"Inst\u00e2ncia Fonte","text":"<p>A entidade Inst\u00e2ncia Fonte representa as ocorr\u00eancias de fontes naturais de recursos no jogo. Cada inst\u00e2ncia possui um identificador \u00fanico, o nome da fonte que representa e a quantidade atual de recursos dispon\u00edveis. Al\u00e9m disso, cada inst\u00e2ncia est\u00e1 vinculada a um chunk espec\u00edfico onde a fonte est\u00e1 localizada e ao material que ela fornece.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Fonte, Item e Chunk.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_inst_fonte Identificador \u00fanico da inst\u00e2ncia da fonte. SERIAL --- PRIMARY KEY nome_fonte Nome da fonte associada a esta inst\u00e2ncia. VARCHAR 30 FOREIGN KEY, NOT NULL qtd_atual Quantidade atual de recursos dispon\u00edveis na fonte. INT --- NOT NULL numero_chunk N\u00famero do chunk onde a fonte est\u00e1 localizada. INT --- FOREIGN KEY, NOT NULL nome_mapa Nome do mapa onde a fonte est\u00e1 localizada. VARCHAR 30 FOREIGN KEY, NOT NULL nome_item_drop Nome do item que pode ser extra\u00eddo desta fonte. VARCHAR 30 FOREIGN KEY, NOT NULL"},{"location":"modulo_1/dicDados/#instancia-mob","title":"Inst\u00e2ncia Mob","text":"<p>A entidade Inst\u00e2ncia Mob representa as ocorr\u00eancias de mobs no jogo. Cada inst\u00e2ncia possui um identificador \u00fanico, o nome do mob que representa e a vida atual do mob. As inst\u00e2ncias de mob tamb\u00e9m est\u00e3o associadas a um chunk espec\u00edfico e, opcionalmente, a uma estrutura em que o mob pode estar presente.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Mob, Chunk e Estrutura.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio id_inst_mob Identificador \u00fanico da inst\u00e2ncia do mob. SERIAL --- PRIMARY KEY nome_mob Nome do mob associado a esta inst\u00e2ncia. VARCHAR 30 FOREIGN KEY, NOT NULL vida_atual Vida atual do mob nesta inst\u00e2ncia. INT --- NOT NULL numero_chunk N\u00famero do chunk onde o mob est\u00e1 localizado. INT --- FOREIGN KEY, NOT NULL nome_mapa Nome do mapa onde o mob est\u00e1 localizado. VARCHAR 30 FOREIGN KEY, NOT NULL id_estrutura Identificador da inst\u00e2ncia de estrutura onde o mob pode estar, se aplic\u00e1vel. INT --- FOREIGN KEY"},{"location":"modulo_1/dicDados/#tabelas-intermediarias","title":"Tabelas Intermedi\u00e1rias","text":""},{"location":"modulo_1/dicDados/#mob-dropa-item","title":"Mob Dropa Item","text":"<p>A tabela Mob Dropa Item modela os itens que podem ser dropados por cada mob. Cada item possui uma probabilidade de ser dropado pelo mob quando ele \u00e9 abatido.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Mob e Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_mob Nome \u00fanico do mob que pode dropar o item. VARCHAR 30 FOREIGN KEY, NOT NULL nome_item Nome do item que pode ser dropado pelo mob. VARCHAR 30 FOREIGN KEY, NOT NULL probabilidade Probabilidade de o item ser dropado pelo mob. DECIMAL(5,2) --- NOT NULL quantidade Quantidade do item que pode ser dropado. INT --- DEFAULT 1"},{"location":"modulo_1/dicDados/#estrutura-fornece-item","title":"Estrutura Fornece Item","text":"<p>A tabela Estrutura Fornece Item modela os itens que podem ser obtidos explorando cada estrutura. Cada item possui uma probabilidade de ser encontrado dentro de uma estrutura explorada.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Estrutura e Item.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_estrutura Nome \u00fanico da estrutura que fornece o item. VARCHAR 30 FOREIGN KEY, NOT NULL nome_item Nome do item obtido pela estrutura. VARCHAR 30 FOREIGN KEY, NOT NULL probabilidade Probabilidade de o item ser encontrado dentro da estrutura. DECIMAL(5,2) --- NOT NULL"},{"location":"modulo_1/dicDados/#ferramenta-minera-instancia-de-fonte","title":"Ferramenta Minera Inst\u00e2ncia de Fonte","text":"<p>A tabela Ferramenta Minera Inst\u00e2ncia de Fonte define quais ferramentas s\u00e3o capazes de minerar cada fonte. Cada fonte pode ser minerada por uma ou mais ferramentas diferentes, dependendo da sua finalidade.</p> <ul> <li>Observa\u00e7\u00e3o: Essa entidade possui chave estrangeira para as entidades Ferramenta Dur\u00e1vel e Fonte.</li> </ul> Nome Descri\u00e7\u00e3o Tipo de Dado Tamanho Restri\u00e7\u00f5es de dom\u00ednio nome_ferramenta Nome da ferramenta utilizada para minerar a fonte. VARCHAR 30 FOREIGN KEY, NOT NULL nome_fonte Nome \u00fanico da fonte que est\u00e1 sendo minerada. VARCHAR 30 FOREIGN KEY, NOT NULL"},{"location":"modulo_1/dicDados/#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o <code>1.0</code> 22/07/2024 Cria\u00e7\u00e3o do Dicion\u00e1rio de Dados Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira <code>1.1</code> 22/07/2024 Primeira vers\u00e3o do Dicion\u00e1rio de Dados finalizada Bruno Ricardo de MenezesArthur Carneiro Trindade Miguel Moreira da Silva de Oliveira <code>2.0</code> 16/08/2024 Segunda vers\u00e3o do Dicion\u00e1rio de Dados finalizada Arthur Carneiro Trindade Bruno Ricardo de MenezesMiguel Moreira da Silva de Oliveira <code>3.0</code> 09/09/2024 Vers\u00e3o final do Dicion\u00e1rio de Dados Bruno Ricardo de MenezesArthur Carneiro Trindade Miguel Moreira da Silva de Oliveira"},{"location":"modulo_1/modeloRelacional/","title":"Modelo Relacional","text":""},{"location":"modulo_1/modeloRelacional/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>O Modelo Relacional \u00e9 a representa\u00e7\u00e3o l\u00f3gica de um banco de dados, derivada do modelo conceitual representado pelo Diagrama Entidade-Relacionamento. Este modelo organiza os dados em tabelas, tamb\u00e9m conhecidas como rela\u00e7\u00f5es, onde cada tabela \u00e9 composta por linhas (tuplas) e colunas (atributos).</p> <p>O principal objetivo do modelo relacional \u00e9 transformar os conceitos abstratos do modelo conceitual em uma estrutura que possa ser implementada e gerenciada dentro de um sistema de gerenciamento de banco de dados (SGBD). Neste modelo, as chaves prim\u00e1rias (PK) e estrangeiras (FK) s\u00e3o definidas para garantir a integridade dos dados, facilitando consultas e manipula\u00e7\u00f5es eficientes.</p> <p>A seguir, apresentamos o modelo relacional desenvolvido, detalhando as tabelas, seus atributos e as rela\u00e7\u00f5es entre elas.</p>"},{"location":"modulo_1/modeloRelacional/#modelo","title":"Modelo","text":"<p>Autores: Arthur Carneiro Trindade, Bruno Ricardo de Menezes e Miguel Moreira da Silva de Oliveira, 2024.</p>"},{"location":"modulo_1/modeloRelacional/#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o <code>1.0</code> 22/07/2024 Vers\u00e3o inicial do MRel Miguel Moreira da Silva de Oliveira Arthur Carneiro TrindadeBruno Ricardo de Menezes <code>1.1</code> 22/07/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 1.0 do MREL Arthur Carneiro Trindade Bruno Ricardo de MenezesMiguel Moreira da Silva de Oliveira <code>2.0</code> 14/08/2024 Atualiza\u00e7\u00e3o da vers\u00e3o 1.1 do MREL Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira <code>3.0</code> 09/09/2024 Vers\u00e3o final Bruno Ricardo de Menezes Arthur Carneiro TrindadeMiguel Moreira da Silva de Oliveira"},{"location":"modulo_2/algebra_relacional/","title":"\u00c1lgebra Relacional","text":""},{"location":"modulo_2/algebra_relacional/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A \u00e1lgebra relacional \u00e9 uma linguagem formal e padronizada para manipula\u00e7\u00e3o e consulta de dados em bancos de dados relacionais. Uma de suas principais vantagens \u00e9 ser independente do sistema de banco de dados utilizado. Essa padroniza\u00e7\u00e3o permite que as opera\u00e7\u00f5es de consulta sejam definidas de maneira consistente e eficiente, garantindo portabilidade independentemente da plataforma escolhida. A seguir, apresentamos a \u00e1lgebra utilizada para algumas consultas do nosso projeto:</p>"},{"location":"modulo_2/algebra_relacional/#consultas","title":"Consultas","text":"<p>\u00c1lgebra Relacional</p>"},{"location":"modulo_2/algebra_relacional/#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o 1.0 19/08/2024 Adi\u00e7\u00e3o da \u00c1lgebra Relacional Entrega 2 Todos Todos"},{"location":"modulo_2/ddl/","title":"DDL (Data Definition Language)","text":""},{"location":"modulo_2/ddl/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A DDL (Linguagem de Defini\u00e7\u00e3o de Dados) \u00e9 composta por comandos SQL que s\u00e3o respons\u00e1veis pela cria\u00e7\u00e3o e estrutura\u00e7\u00e3o do banco de dados. Esses comandos s\u00e3o usados para definir o esquema do banco de dados, incluindo a cria\u00e7\u00e3o, modifica\u00e7\u00e3o e exclus\u00e3o de tabelas. Abaixo est\u00e3o os comandos DDL utilizados na cria\u00e7\u00e3o e estrutura\u00e7\u00e3o do banco de dados para o nosso projeto:</p>"},{"location":"modulo_2/ddl/#codigo","title":"C\u00f3digo","text":"<pre><code>-- Criando tipos ENUM\n\n-- Tipo ENUM para o ciclo de dia\nCREATE TYPE ciclo_dia AS ENUM ('dia', 'tarde', 'noite');\n\n-- Tipo ENUM para o tipo de item\nCREATE TYPE tipo_item AS ENUM ('material', 'craftavel', 'alimento');\n\n-- Tipo ENUM para o tipo de item craft\u00e1vel\nCREATE TYPE tipo_craftavel AS ENUM ('funcional', 'ferramenta', 'armadura');\n\n-- Tipo ENUM para o tipo de mob\nCREATE TYPE tipo_mob AS ENUM ('agressivo', 'pacifico');\n\n-- Tipo ENUM para o tipo de mob pac\u00edfico\nCREATE TYPE tipo_pacifico AS ENUM ('NPC', 'outro');\n\n-- Tabelas Entidade\n\n-- Tabela Mapa\nCREATE TABLE Mapa (\n    nome VARCHAR(30) PRIMARY KEY,\n    hora ciclo_dia NOT NULL\n);\n\n-- Tabela Bioma\nCREATE TABLE Bioma (\n    nome VARCHAR(30) PRIMARY KEY\n);\n\n-- Tabela Chunk\nCREATE TABLE Chunk (\n    numero SERIAL PRIMARY KEY,\n    nome_bioma VARCHAR(10) NOT NULL,\n    nome_mapa VARCHAR(30) NOT NULL,\n    FOREIGN KEY (nome_bioma) REFERENCES Bioma(nome),\n    FOREIGN KEY (nome_mapa) REFERENCES Mapa(nome)\n);\n\n-- Tabela Constru\u00edvel\nCREATE TABLE Construivel (\n    nome VARCHAR(30) PRIMARY KEY,\n    receita TEXT NOT NULL,\n    funcao TEXT NOT NULL\n);\n\n-- Tabela Item\nCREATE TABLE Item (\n    nome VARCHAR(30) PRIMARY KEY,\n    tipo_item tipo_item NOT NULL\n);\n\n-- Tabela Inst\u00e2ncia Item\nCREATE TABLE InstanciaItem (\n    id_inst_item SERIAL PRIMARY KEY,\n    nome_item VARCHAR(30) NOT NULL,\n    durabilidade_atual INT,\n    FOREIGN KEY (nome_item) REFERENCES Item(nome)\n);\n\n-- Tabela Alimento\nCREATE TABLE Alimento (\n    nome_item VARCHAR(30) PRIMARY KEY,\n    pts_fome INT NOT NULL,\n    FOREIGN KEY (nome_item) REFERENCES Item(nome)\n);\n\n-- Tabela Craft\u00e1vel\nCREATE TABLE Craftavel (\n    nome_item VARCHAR(30) PRIMARY KEY,\n    tipo_craftavel tipo_craftavel NOT NULL,\n    receita TEXT NOT NULL,\n    FOREIGN KEY (nome_item) REFERENCES Item(nome)\n);\n\n-- Tabela Funcional\nCREATE TABLE Funcional (\n    nome_item VARCHAR(30) PRIMARY KEY,\n    funcao TEXT NOT NULL,\n    receita TEXT NOT NULL,\n    FOREIGN KEY (nome_item) REFERENCES Craftavel(nome_item)\n);\n\n-- Tabela Ferramenta Dur\u00e1vel\nCREATE TABLE FerramentaDuravel (\n    nome_item VARCHAR(30) PRIMARY KEY,\n    durabilidade_total INT NOT NULL,\n    pts_dano INT NOT NULL,\n    receita TEXT NOT NULL,\n    FOREIGN KEY (nome_item) REFERENCES Craftavel(nome_item)\n);\n\n-- Tabela Armadura Dur\u00e1vel\nCREATE TABLE ArmaduraDuravel (\n    nome_item VARCHAR(30) PRIMARY KEY,\n    pts_armadura INT NOT NULL,\n    durabilidade_total INT NOT NULL,\n    receita TEXT NOT NULL,\n    FOREIGN KEY (nome_item) REFERENCES Craftavel(nome_item)\n);\n\n-- Tabela Estrutura\nCREATE TABLE Estrutura (\n    nome VARCHAR(30) PRIMARY KEY,\n    probabilidade DECIMAL(5,2) NOT NULL\n);\n\n-- Tabela Fonte\nCREATE TABLE Fonte (\n    nome VARCHAR(30) PRIMARY KEY,\n    qtd_max INT NOT NULL\n);\n\n-- Tabela Miss\u00e3o\nCREATE TABLE Missao (\n    id_missao SERIAL PRIMARY KEY,\n    nome VARCHAR(30) NOT NULL,\n    descricao TEXT NOT NULL,\n    objetivo TEXT NOT NULL,\n    exp INT NOT NULL,\n    recompensa TEXT NOT NULL,\n    nome_item VARCHAR(30),\n    FOREIGN KEY (nome_item) REFERENCES Item(nome)\n);\n\n-- Tabela Jogador\nCREATE TABLE Jogador (\n    id_jogador SERIAL PRIMARY KEY,\n    nome VARCHAR(10) NOT NULL,\n    fome INT NOT NULL,\n    vida INT NOT NULL,\n    nivel INT NOT NULL,\n    exp INT NOT NULL,\n    cabeca VARCHAR(30),\n    peito VARCHAR(30),\n    pernas VARCHAR(30),\n    pes VARCHAR(30),\n    numero_chunk INT NOT NULL,\n    missao INT,\n    FOREIGN KEY (numero_chunk) REFERENCES Chunk(numero),\n    FOREIGN KEY (missao) REFERENCES Missao(id_missao)\n);\n\n-- Tabela Invent\u00e1rio\nCREATE TABLE Inventario (\n    id_inst_item INT PRIMARY KEY NOT NULL,\n    id_inventario INT NOT NULL,\n    FOREIGN KEY (id_inventario) REFERENCES Jogador(id_jogador),\n    FOREIGN KEY (id_inst_item) REFERENCES InstanciaItem(id_inst_item)\n);\n\n-- Tabela Mob\nCREATE TABLE Mob (\n    nome VARCHAR(10) PRIMARY KEY,\n    vida_max INT NOT NULL,\n    probabilidade DECIMAL(5,2) NOT NULL,\n    tipo_mob tipo_mob NOT NULL\n);\n\n-- Tabela Agressivo\nCREATE TABLE Agressivo (\n    nome_mob VARCHAR(10) PRIMARY KEY,\n    impulsivo BOOLEAN NOT NULL,\n    pts_dano INT NOT NULL,\n    vida_max INT NOT NULL,\n    probabilidade DECIMAL(5,2) NOT NULL,\n    FOREIGN KEY (nome_mob) REFERENCES Mob(nome)\n);\n\n-- Tabela Pac\u00edfico\nCREATE TABLE Pacifico (\n    nome_mob VARCHAR(10) PRIMARY KEY,\n    vida_max INT NOT NULL,\n    probabilidade DECIMAL(5,2) NOT NULL,\n    tipo_pacifico tipo_pacifico NOT NULL,\n    FOREIGN KEY (nome_mob) REFERENCES Mob(nome)\n);\n\n-- Tabela NPC\nCREATE TABLE NPC (\n    nome_pacifico VARCHAR(10),\n    nome_proprio VARCHAR(10) NOT NULL,\n    FOREIGN KEY (nome_pacifico) REFERENCES Pacifico(nome_mob)\n);\n\n-- Tabelas Inst\u00e2ncia\n\n-- Tabela Inst\u00e2ncia Constru\u00edvel\nCREATE TABLE InstanciaConstruivel (\n    id_inst_construivel SERIAL PRIMARY KEY,\n    nome_construivel VARCHAR(30) NOT NULL,\n    numero_chunk INT NOT NULL,\n    FOREIGN KEY (nome_construivel) REFERENCES Construivel(nome),\n    FOREIGN KEY (numero_chunk) REFERENCES Chunk(numero)\n);\n\n-- Tabela Inst\u00e2ncia Estrutura\nCREATE TABLE InstanciaEstrutura (\n    id_inst_estrutura SERIAL PRIMARY KEY,\n    nome_estrutura VARCHAR(30) NOT NULL,\n    id_bioma VARCHAR(10) NOT NULL,\n    numero_chunk INT NOT NULL,\n    FOREIGN KEY (nome_estrutura) REFERENCES Estrutura(nome),\n    FOREIGN KEY (id_bioma) REFERENCES Bioma(nome),\n    FOREIGN KEY (numero_chunk) REFERENCES Chunk(numero)\n);\n\n-- Tabela Inst\u00e2ncia Fonte\nCREATE TABLE InstanciaFonte (\n    id_inst_fonte SERIAL PRIMARY KEY,\n    nome_fonte VARCHAR(30) NOT NULL,\n    qtd_atual INT NOT NULL,\n    numero_chunk INT NOT NULL,\n    FOREIGN KEY (nome_fonte) REFERENCES Fonte(nome),\n    FOREIGN KEY (numero_chunk) REFERENCES Chunk(numero)\n);\n\n-- Tabela Inst\u00e2ncia Mob\nCREATE TABLE InstanciaMob (\n    id_inst_mob SERIAL PRIMARY KEY,\n    nome_mob VARCHAR(10) NOT NULL,\n    vida_atual INT NOT NULL,\n    numero_chunk INT NOT NULL,\n    id_estrutura INT,\n    FOREIGN KEY (nome_mob) REFERENCES Mob(nome),\n    FOREIGN KEY (numero_chunk) REFERENCES Chunk(numero),\n    FOREIGN KEY (id_estrutura) REFERENCES InstanciaEstrutura(id_inst_estrutura)\n);\n\n-- Tabelas Intermedi\u00e1rias\n\n-- Tabela Mob Dropa Item\nCREATE TABLE MobDropaItem (\n    nome_mob VARCHAR(10) NOT NULL,\n    nome_item VARCHAR(30) NOT NULL,\n    probabilidade DECIMAL(5,2) NOT NULL,\n    FOREIGN KEY (nome_mob) REFERENCES Mob(nome),\n    FOREIGN KEY (nome_item) REFERENCES Item(nome)\n);\n\n-- Tabela Estrutura Fornece Item\nCREATE TABLE EstruturaForneceItem (\n    nome_estrutura VARCHAR(30) NOT NULL,\n    nome_item VARCHAR(30) NOT NULL,\n    probabilidade DECIMAL(5,2) NOT NULL,\n    FOREIGN KEY (nome_estrutura) REFERENCES Estrutura(nome),\n    FOREIGN KEY (nome_item) REFERENCES Item(nome)\n);\n\n-- Tabela Ferramenta Minera Inst\u00e2ncia de Fonte\nCREATE TABLE FerramentaMineraInstFonte (\n    nome_ferramenta VARCHAR(30) NOT NULL,\n    nome_fonte VARCHAR(30) NOT NULL,\n    FOREIGN KEY (nome_ferramenta) REFERENCES FerramentaDuravel(nome_item),\n    FOREIGN KEY (nome_fonte) REFERENCES Fonte(nome)\n);\n</code></pre>"},{"location":"modulo_2/ddl/#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o 1.0 19/08/2024 Adi\u00e7\u00e3o dos comandos DDL para a Entrega 2 Todos Todos"},{"location":"modulo_2/dml/","title":"DML (Data Manipulation Language)","text":""},{"location":"modulo_2/dml/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A DML (Linguagem de Manipula\u00e7\u00e3o de Dados) \u00e9 composta por comandos SQL usados para manipular os dados contidos nas estruturas definidas pela DDL. Comandos DML permitem inserir, atualizar, deletar e modificar os dados nas tabelas do banco de dados. Abaixo est\u00e3o os comandos DML utilizados para pouplar o banco de dados com os dados inicias do nosso projeto:</p>"},{"location":"modulo_2/dml/#codigo","title":"C\u00f3digo","text":"<pre><code>-- Tabela Mapa\nINSERT INTO Mapa (nome, hora)\nVALUES  ('O incrivel mundo BD4', 'noite');\n\n-- Tabela Bioma\nINSERT INTO Bioma (nome)\nVALUES  ('Deserto'),\n        ('Floresta'),\n        ('Montanhas'),\n        ('Plan\u00edcie'),\n        ('Caverna');\n\n-- Inserindo Chunks para um mapa 100x100\nDO\n$$\nDECLARE\n    i INTEGER := 1;\n    biomas TEXT[] := ARRAY['Deserto', 'Floresta', 'Montanhas', 'Plan\u00edcie', 'Caverna'];\nBEGIN\n    WHILE i &lt; 10000 LOOP\n        INSERT INTO Chunk (nome_mapa, nome_bioma)\n        VALUES ('O incrivel mundo BD4', biomas[1 + floor(random() * array_length(biomas, 1))::int]);\n\n        i := i + 1;\n    END LOOP;\nEND\n$$;\n\n-- Tabela Item\nINSERT INTO Item (nome, tipo_item)\nVALUES  ('Pedregulho', 'material'),\n        ('Bolo', 'alimento'),\n        ('Mapa', 'craftavel'),\n        ('Capacete de Ferro', 'craftavel'),\n        ('polvora', 'material'),\n        ('Carne Podre', 'alimento'),\n        ('Barra de Ferro', 'material'),\n        ('Pena', 'material'),\n        ('Frango', 'alimento'),\n        ('xp', 'material'),\n        ('ovo', 'material'),\n        ('P\u00f3 de Blaze', 'material'),\n        ('Barra de Ouro', 'material'),\n        ('Diamante', 'material'),\n        ('Picareta de Diamante', 'craftavel'),\n        ('Machado', 'craftavel'),\n        ('Pa', 'craftavel');\n\n\n-- Tabela Alimento\nINSERT INTO Alimento (nome_item, pts_fome)\nVALUES  ('Bolo', 14);\n\n-- Tabela Craftavel\nINSERT INTO Craftavel (nome_item, tipo_craftavel, receita)\nVALUES  ('Mapa', 'funcional', '9 papel'),\n        ('Capacete de Ferro', 'armadura', '5 barra de Ferro'),\n        ('Picareta de Diamante', 'ferramenta', '3 diamante + 2 graveto'),\n        ('Pa', 'ferramenta', '1 diamante + 2 graveto'),\n        ('Machado', 'ferramenta', '3 diamante + 2 graveto');\n\n-- Tabela Funcional\nINSERT INTO Funcional (nome_item, funcao, receita)\nVALUES  ('Mapa', 'Ver o mapa', '9 papel');\n\n-- Tabela Armadura Dur\u00e1vel\nINSERT INTO ArmaduraDuravel (nome_item, durabilidade_total, pts_armadura, receita)\nVALUES  ('Capacete de Ferro', 165, 2, '5 barra de Ferro');\n\n-- Tabela Ferramenta Dur\u00e1vel\nINSERT INTO FerramentaDuravel (nome_item, durabilidade_total, pts_dano, receita)\nVALUES  ('Picareta de Diamante', 1561, 5, '3 diamantes + 2 graveto'),\n        ('Pa', 1561, 5, '1 diamante + 2 graveto'),\n        ('Machado', 1561, 5, '3 diamante + 2 graveto');\n\n-- Tabela Construivel\nINSERT INTO Construivel (nome, receita, funcao)\nVALUES  ('Bau', '8 Tabua de madeira', 'Armazenar itens'),\n        ('Fornalha', '8 Pedregulho', 'Cozinhar alimentos'),\n        ('Bancada de Trabalho', '4 Tabua de madeira', 'Liberar receitas avan\u00e7adas'),\n        ('Casa', '1 porta + 64 bloco + 5 tocha', 'Oferecer prote\u00e7\u00e3o a noite'),\n        ('Cama', '3 tabua + 3 l\u00e3', 'Possibilita dormir');\n\n-- Tabela Inst\u00e2ncia Constru\u00edvel\nINSERT INTO InstanciaConstruivel (nome_construivel, numero_chunk)\nVALUES  ('Casa', 10),\n        ('Cama', 10),\n        ('Bancada de Trabalho', 10),\n        ('Fornalha', 55),\n        ('Bau', 55);\n\n\n-- Tabela Missao\nINSERT INTO Missao (id_missao, nome, descricao, objetivo, exp, recompensa)\nVALUES  (0, '', '', '', 00.00, '');\nINSERT INTO Missao (nome, descricao, objetivo, exp, recompensa)\nVALUES  ('Lenhador Novato', 'Colete madeira de uma \u00e1rvore para obter recursos b\u00e1sicos.', 'Coletar madeira', 10, '4 tabua'),\n        ('Artes\u00e3o Iniciante', 'Crie uma mesa de trabalho para come\u00e7ar a fabricar itens.', 'Criar uma mesa de trabalho', 15, '2 gravetos'),\n        ('Explorador Iniciante', 'Abra seu invent\u00e1rio para come\u00e7ar a explorar seus itens.', 'Abrir o invent\u00e1rio', 20, '5 pao'),\n        ('Minerador Iniciante', 'Crie uma picareta de madeira para minerar seus primeiros blocos.', 'Criar uma picareta de madeira', 25, '1 picareta de madeira'),\n        ('Ferreiro Iniciante', 'Crie um forno para fundir min\u00e9rios e cozinhar alimentos.', 'Criar um forno', 30, '5 carvao');\n\n-- Tabela Jogador\nINSERT INTO Jogador (nome, fome, vida, nivel, exp, cabeca, peito, pernas, pes, numero_chunk, missao)\nVALUES  ('EhOMiguel', 20, 20, 5, 100, 'Capacete de Ferro', 'Peitoral de Ferro', 'Cal\u00e7as de Ferro', 'Botas de Ferro', 1, 0),\n        ('EhOBruno', 19, 18, 4, 90, 'Capacete de ouro', 'Peitoral de Ouro', 'Cal\u00e7as de Ouro', 'Botas de Ouro', 40, 1),\n        ('EhOArthur', 1, 1, 0, 10, null, null, 'Cal\u00e7as de Couro', null, 55, 4),\n        ('lionKing', 0, 5, 4, 50, null, null, null, null, 10, 0);\n\n-- Tabela Inst\u00e2ncia Item\nINSERT INTO InstanciaItem (nome_item, durabilidade_atual)\nVALUES  ('Pedregulho', null),\n        ('Pedregulho', null),\n        ('Pedregulho', null),\n        ('Pedregulho', null),\n        ('Pedregulho', null),\n        ('Bolo', null),\n        ('Mapa', null),\n        ('Pedregulho', null),\n        ('Pedregulho', null),\n        ('Capacete de Ferro', 100.00),\n        ('Picareta de Diamante', 1000.00),\n        ('Picareta de Diamante', 200.00);\n\n-- Tabela Inventario\nINSERT INTO Inventario (id_inst_item, id_inventario)\nVALUES (1, 1),\n        (2, 1),\n        (3, 1),\n        (4, 1),\n        (5, 1),\n        (6, 2),\n        (7, 2),\n        (8, 3),\n        (9, 3),\n        (10, 4),\n        (11, 4),\n        (12, 4);\n\n-- Tabela Mob\nINSERT INTO Mob (nome, vida_max, tipo_mob, probabilidade)\nVALUES  ('Crepper', 20, 'agressivo', 100.00),\n        ('Zumbi', 25, 'agressivo', 100.00),\n        ('Lobo', 8, 'agressivo', 100.00),\n        ('Galinha', 5, 'pacifico', 100.00),\n        ('Alde\u00e3o', 20, 'pacifico', 100.00);\n\n-- Tabela Agressivo\nINSERT INTO Agressivo (nome_mob, impulsivo, pts_dano, probabilidade, vida_max)\nVALUES  ('Crepper', true, 10, 100.00, 20),\n        ('Zumbi', true, 3, 100.00, 25),\n        ('Lobo', false, 4, 100.00, 8);\n\n-- Tabela Pacifico\nINSERT INTO Pacifico (nome_mob, tipo_pacifico, vida_max, probabilidade)\nVALUES  ('Galinha', 'outro', 10, 100.00),\n        ('Alde\u00e3o', 'NPC', 20, 100.00);\n\n-- Tabela NPC\nINSERT INTO NPC (nome_pacifico, nome_proprio)\nVALUES  ('Alde\u00e3o', 'Cleitin'),\n        ('Alde\u00e3o', 'Josefa');\n\n-- Tabela Estrutura\nINSERT INTO Estrutura (nome, probabilidade)\nVALUES  ('Templo do deserto', 10.00),\n        ('Templo da selva', 15.00),\n        ('Vila', 20.00),\n        ('Fortaleza do Nether', 10.00),\n        ('Fortaleza', 10.00);\n\n-- Tabela Inst\u00e2ncia Estrutura\nINSERT INTO InstanciaEstrutura (nome_estrutura, id_bioma, numero_chunk)\nVALUES  ('Templo do deserto', 'Deserto', 1),\n        ('Templo da selva', 'Floresta', 10),\n        ('Vila', 'Plan\u00edcie', 40),\n        ('Fortaleza do Nether', 'Caverna', 55),\n        ('Fortaleza', 'Caverna', 22);\n\n-- Tabela Inst\u00e2ncia Mob\nINSERT INTO InstanciaMob (nome_mob, vida_atual, numero_chunk, id_estrutura)\nVALUES  ('Crepper', 20, 55, null),\n        ('Zumbi', 15, 10, 2),\n        ('Lobo', 8, 22, null),\n        ('Galinha', 5, 40, null),\n        ('Alde\u00e3o', 20, 40, 3);\n\n-- Tabela Mob Dropa Item\nINSERT INTO MobDropaItem (nome_mob, nome_item, probabilidade)\nVALUES  ('Crepper', 'xp', 100.00),\n        ('Crepper', 'polvora', 100.00),\n        ('Zumbi', 'Carne Podre', 50.00),\n        ('Zumbi', 'Barra de Ferro', 1.00),\n        ('Galinha', 'Pena', 50.00),\n        ('Galinha', 'Frango', 100.00),\n        ('Galinha', 'xp', 100.00),\n        ('Galinha', 'ovo', 100.00);\n\n-- Tabela Estrutura Fornece Item\nINSERT INTO EstruturaForneceItem (nome_estrutura, nome_item, probabilidade)\nVALUES  ('Templo do deserto', 'Barra de Ouro', 18.00),\n        ('Templo da selva', 'Barra de Ferro', 37.00),\n        ('Templo da selva', 'Diamante', 13.00),\n        ('Fortaleza do Nether', 'P\u00f3 de Blaze', 50.00);\n\n-- tabela Fonte\nINSERT INTO Fonte (nome, qtd_max)\nVALUES  ('\u00c1rvore', 30),\n        ('Veio de Diamante', 5),\n        ('Jazida de Ouro', 10),\n        ('Jazida de Ferro', 15),\n        ('Jazida de Carv\u00e3o', 20),\n        ('Jazida de Esmeralda', 3),\n        ('Cardume', 5),\n        ('Duna', 256),\n        ('Pedreira', 256);\n\n-- Tabela Inst\u00e2ncia Fonte\nINSERT INTO InstanciaFonte (nome_fonte, qtd_atual, numero_chunk)\nVALUES  ('\u00c1rvore', 15, 1),\n        ('Veio de Diamante', 3, 10),\n        ('Jazida de Ouro', 5, 10),\n        ('Jazida de Ferro', 9, 55),\n        ('Jazida de Carv\u00e3o', 12, 55),\n        ('Jazida de Esmeralda', 1, 55);\n\n-- Tabela Ferramenta Minera Inst\u00e2ncia de Fonte\nINSERT INTO FerramentaMineraInstFonte (nome_ferramenta, nome_fonte)\nVALUES  ('Machado', '\u00c1rvore'),\n        ('Pa', 'Duna'),\n        ('Picareta de Diamante', 'Pedreira'),\n        ('Picareta de Diamante', 'Jazida de Ferro');\n</code></pre>"},{"location":"modulo_2/dml/#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o 1.0 19/08/2024 Adi\u00e7\u00e3o dos comandos DML para a Entrega 2 Todos Todos"},{"location":"modulo_2/dql/","title":"DQL (Data Query Language)","text":""},{"location":"modulo_2/dql/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A DQL (Linguagem de Consulta de Dados) \u00e9 empregada para consultar e recuperar dados armazenados no banco de dados. O comando mais comum de DQL \u00e9 o SELECT, que permite buscar e visualizar informa\u00e7\u00f5es relevantes sem modificar o banco de dados. No contexto do nosso jogo, os comandos DQL s\u00e3o utilizados para obter informa\u00e7\u00f5es sobre o progresso dos jogadores, listar itens dispon\u00edveis em determinado ambiente, ou verificar o status de uma miss\u00e3o, por exemplo. Abaixo est\u00e3o os comandos DQL utilizados no nosso projeto:</p>"},{"location":"modulo_2/dql/#codigo","title":"C\u00f3digo","text":"<pre><code>-- Consultar se h\u00e1 o item espec\u00edfico dentro do invent\u00e1rio do jogador\nSELECT nome_item\nFROM Inventario\nJOIN InstanciaItem ON Inventario.id_inst_item = InstanciaItem.id_inst_item\nJOIN Jogador ON Inventario.id_inventario = Jogador.id_jogador\nWHERE Jogador.nome = 'EhOBruno'\n  AND InstanciaItem.nome_item = 'Bolo';\n\n-- Lista todos os itens do invent\u00e1rio do jogador\nSELECT Item.nome AS item_nome, \n       InstanciaItem.durabilidade_atual\nFROM Inventario\nJOIN InstanciaItem ON Inventario.id_inst_item = InstanciaItem.id_inst_item\nJOIN Item ON InstanciaItem.nome_item = Item.nome\nWHERE Inventario.id_inventario = 1;\n\n-- Consultar per\u00edodo do dia no mundo\nSELECT hora\nFROM mapa;\n\n-- Consultar atributos b\u00e1sicos do jogador\nSELECT nome, fome, vida\nFROM Jogador\nWHERE Jogador.nome = 'EhOBruno';\n\n-- Consultar informa\u00e7\u00f5es de n\u00edvel do jogador\nSELECT nivel, exp\nFROM Jogador\nWHERE Jogador.nome = 'EhOBruno';\n\n-- Consultar informa\u00e7\u00f5es de armadura do jogador (adicionar pts_armadura)\nSELECT cabeca, peito, pernas, pes \nFROM Jogador\nWHERE Jogador.nome = 'EhOBruno';\n\n-- Consultar estruturas dentro de um chunk em que o jogador se encontra\nSELECT \n  Chunk.nome_bioma,\n  InstanciaEstrutura.nome_estrutura,\nFROM \n  Chunk\nLEFT JOIN \n  InstanciaEstrutura ON InstanciaEstrutura.numero_chunk = Chunk.numero\nJOIN \n  Jogador ON Jogador.numero_chunk = Chunk.numero\nWHERE \n  Jogador.nome = 'EhOBruno';\n\n-- Consultar fontes dentro de um chunk em que o jogador se encontra\nSELECT Fonte.nome AS fonte_nome, \n       InstanciaFonte.qtd_atual\nFROM InstanciaFonte\nJOIN Fonte ON InstanciaFonte.nome_fonte = Fonte.nome\nWHERE InstanciaFonte.numero_chunk = 1;\n\n-- Consultar mobs que est\u00e3o no mesmo chunk que o jogador\nSELECT\n  InstanciaMob.id_inst_mob,\n  InstanciaMob.nome_mob\nFROM\n  InstanciaMob\nJOIN\n  Jogador ON Jogador.numero_chunk = InstanciaMob.numero_chunk\nWHERE\n  Jogador.nome = 'EhOBruno';\n\n-- Consultar atributos b\u00e1sicos de um mob espec\u00edfico no mesmo chunk do jogador\nSELECT\n  Mob.tipo_mob,\n  InstanciaMob.nome_mob,\n  InstanciaMob.vida_atual\nFROM\n  InstanciaMob\nJOIN\n  Mob ON Mob.nome = InstanciaMob.nome_mob\nJOIN\n  Jogador ON Jogador.numero_chunk = InstanciaMob.numero_chunk\nWHERE\n  Jogador.nome = 'EhOBruno'\n  AND Mob.nome = 'Galinha';\n\n-- Consultar a miss\u00e3o atual do jogador\nSELECT m.nome, m.descricao, m.objetivo, m.recompensa\nFROM Missao m\nJOIN Jogador j ON m.id_missao = j.missao\nWHERE j.id_jogador = 2;\n\n-- Ferramenta necess\u00e1ria para minerar o item espec\u00edfico\nSELECT FerramentaMineraInstFonte.nome_ferramenta\nFROM FerramentaMineraInstFonte\nWHERE FerramentaMineraInstFonte.nome_fonte = 'Madeira';\n\n-- Atualizar a durabilidade da inst\u00e2ncia de um item no invent\u00e1rio do jogador\nUPDATE InstanciaItem\nSET durabilidade_atual = 200\nWHERE id_inst_item = 10;\n\n-- Atualizar vida atual de uma inst\u00e2ncia de um mob\nUPDATE InstanciaMob\nSET vida_atual = 19\nWHERE id_inst_mob = 1;\n\n-- Atualizar vida atual de um jogador\nUPDATE Jogador\nSET vida = 19\nWHERE nome = 'EhOArthur';\n\n-- Atualizar a miss\u00e3o de um jogador\nUPDATE Jogador\nSET missao = 2\nWHERE nome = 'EhOArthur';\n\n-- Atualizar o n\u00edvel de um jogador\nUPDATE Jogador\nSET nivel = 3\nWHERE nome = 'EhOArthur';\n</code></pre>"},{"location":"modulo_2/dql/#historico-de-versoes","title":"Hist\u00f3rico de vers\u00f5es","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor Revis\u00e3o 1.0 19/08/2024 Adi\u00e7\u00e3o dos comandos DQL para a Entrega 2 Todos Todos"},{"location":"modulo_3/dml_inst/","title":"dml_inst","text":""},{"location":"modulo_3/dml_inst/#codigo","title":"C\u00f3digo","text":"<pre><code>-- Tabela Inst\u00e2ncia Estrutura\nDO\n$$\nDECLARE\n    chunk_rec RECORD;\n    rand_num FLOAT;\n    estrutura_existente INTEGER;\n    nova_estrutura_id INTEGER;\nBEGIN\n    -- Iterando por todos os chunks em todos os mapas\n    FOR chunk_rec IN \n        SELECT numero, nome_bioma, nome_mapa \n        FROM Chunk\n    LOOP\n        -- Verifica se o chunk j\u00e1 possui uma estrutura\n        SELECT COUNT(*) INTO estrutura_existente\n        FROM InstanciaEstrutura\n        WHERE numero_chunk = chunk_rec.numero\n        AND nome_mapa = chunk_rec.nome_mapa;\n\n        -- Se j\u00e1 houver uma estrutura, pula para o pr\u00f3ximo chunk\n        IF estrutura_existente &gt; 0 THEN\n            CONTINUE;\n        END IF;\n\n        -- Superf\u00edcie\n        IF chunk_rec.nome_mapa = 'Superf\u00edcie' THEN\n            -- Templo da Selva\n            IF chunk_rec.nome_bioma = 'Selva' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 5.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Templo da Selva', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mobs na estrutura\n                    CALL inserir_inst_mob('Zumbi', 25, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Esqueleto', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n\n            -- Templo do Deserto\n            IF chunk_rec.nome_bioma = 'Deserto' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 5.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Templo do Deserto', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mobs na estrutura\n                    CALL inserir_inst_mob('Zumbi', 25, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Zumbi', 25, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n\n            -- Cabana da Bruxa\n            IF chunk_rec.nome_bioma = 'P\u00e2ntano' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 7.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Cabana da Bruxa', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mob na Cabana da Bruxa\n                    CALL inserir_inst_mob('Bruxa', 26, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n\n            -- Portal em Ru\u00ednas\n            IF chunk_rec.nome_bioma IN ('Deserto', 'Plan\u00edcie', 'Floresta', 'Selva', 'P\u00e2ntano', 'Montanha', 'Neve') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 10.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Portal em Ru\u00ednas', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mob no Portal em Ru\u00ednas\n                    CALL inserir_inst_mob('Piglin', 16, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Piglin Zumbi', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n\n            -- Vila\n            IF chunk_rec.nome_bioma IN ('Deserto', 'Plan\u00edcie', 'Floresta', 'Montanha', 'Neve') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 20.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Vila', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir NPCs na Vila\n                    CALL inserir_inst_mob('Alde\u00e3o', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Alde\u00e3o', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Golem de Ferro', 100, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n\n            -- Posto Avan\u00e7ado\n            IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Deserto', 'Montanha') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 8.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Posto Avan\u00e7ado', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mobs no Posto Avan\u00e7ado\n                    CALL inserir_inst_mob('Saqueador', 24, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Saqueador', 24, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n        END IF;\n\n        -- Cavernas\n        IF chunk_rec.nome_mapa = 'Cavernas' THEN\n            -- Fortaleza do Fim\n            IF chunk_rec.nome_bioma = 'Fortaleza' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 5.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Fortaleza do Fim', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mobs na Fortaleza do Fim\n                    CALL inserir_inst_mob('Esqueleto', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Blaze', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n\n            -- Mina Abandonada\n            IF chunk_rec.nome_bioma = 'Caverna' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 10.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Mina Abandonada', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mobs na Mina Abandonada\n                    CALL inserir_inst_mob('Aranha', 16, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n        END IF;\n\n        -- Nether\n        IF chunk_rec.nome_mapa = 'Nether' THEN\n            -- Basti\u00e3o em Ru\u00ednas\n            IF chunk_rec.nome_bioma = 'Descampado' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 3.00 THEN\n                    -- Chamar stored procedure para inserir a estrutura\n                    CALL inserir_inst_estrutura('Basti\u00e3o em Ru\u00ednas', chunk_rec.nome_bioma, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    -- Chamar stored procedure para inserir mobs no Basti\u00e3o em Ru\u00ednas\n                    CALL inserir_inst_mob('Piglin', 16, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Piglin Zumbi', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n                    CALL inserir_inst_mob('Esqueleto Wither', 20, chunk_rec.numero, chunk_rec.nome_mapa, nova_estrutura_id);\n\n                    CONTINUE;\n                END IF;\n            END IF;\n        END IF;\n\n    END LOOP;\nEND\n$$;\n\n-- Tabela Inst\u00e2ncia Mob\nDO\n$$\nDECLARE\n    chunk_rec RECORD;\n    rand_num FLOAT;\nBEGIN\n    -- Iterando por todos os chunks na tabela Chunk\n    FOR chunk_rec IN \n        SELECT numero, nome_bioma, nome_mapa \n        FROM Chunk\n    LOOP\n        -- Superf\u00edcie\n        IF chunk_rec.nome_mapa = 'Superf\u00edcie' THEN\n            -- Galinha (spawn em Plan\u00edcie, Floresta)\n            IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Floresta') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 45.00 THEN\n                    CALL inserir_inst_mob('Galinha', 5, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Vaca e Porco (spawn em Plan\u00edcie)\n            IF chunk_rec.nome_bioma = 'Plan\u00edcie' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 45.00 THEN\n                    CALL inserir_inst_mob('Vaca', 10, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 35.00 THEN\n                    CALL inserir_inst_mob('Porco', 10, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Ovelha (spawn em Plan\u00edcie, Montanha)\n            IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Montanha') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 30.00 THEN\n                    CALL inserir_inst_mob('Ovelha', 8, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Peixe, Golfinho e Guardi\u00e3o (spawn em Lago)\n            IF chunk_rec.nome_bioma = 'Lago' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 30.00 THEN\n                    CALL inserir_inst_mob('Peixe', 3, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 10.00 THEN\n                    CALL inserir_inst_mob('Golfinho', 10, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 5.00 THEN\n                    CALL inserir_inst_mob('Guardi\u00e3o', 30, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Urso e Golem de Neve (spawn em Neve)\n            IF chunk_rec.nome_bioma = 'Neve' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 25.00 THEN\n                    CALL inserir_inst_mob('Urso', 30, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 15.00 THEN\n                    CALL inserir_inst_mob('Golem de Neve', 4, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n        END IF;\n\n        -- Cavernas\n        IF chunk_rec.nome_mapa = 'Cavernas' THEN\n            -- Mobs hostis (spawn em Caverna)\n            IF chunk_rec.nome_bioma IN ('Caverna', 'Fortaleza') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 40.00 THEN\n                    CALL inserir_inst_mob('Esqueleto', 20, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 40.00 THEN\n                    CALL inserir_inst_mob('Creeper', 20, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 50.00 THEN\n                    CALL inserir_inst_mob('Zumbi', 25, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 30.00 THEN\n                    CALL inserir_inst_mob('Aranha', 16, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 20.00 THEN\n                    CALL inserir_inst_mob('Enderman', 26, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 10.00 THEN\n                    CALL inserir_inst_mob('Bruxa', 26, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Warden (spawn em Cidade ancestral)\n            IF chunk_rec.nome_bioma = 'Cidade ancestral' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 5.00 THEN\n                    CALL inserir_inst_mob('Warden', 500, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n        END IF;\n\n        -- Nether\n        IF chunk_rec.nome_mapa = 'Nether' THEN\n            -- Piglin e Hoglin (spawn em Floresta carmesim)\n            IF chunk_rec.nome_bioma = 'Floresta carmesim' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 45.00 THEN\n                    CALL inserir_inst_mob('Piglin', 16, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n                IF rand_num &lt;= 40.00 THEN\n                    CALL inserir_inst_mob('Hoglin', 40, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Ghast e Piglin Zumbi (spawn em Descampado)\n            IF chunk_rec.nome_bioma = 'Descampado' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 35.00 THEN\n                    CALL inserir_inst_mob('Ghast', 10, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 50.00 THEN\n                    CALL inserir_inst_mob('Piglin Zumbi', 20, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n\n            -- Enderman (spawn em Floresta distorcida)\n            IF chunk_rec.nome_bioma = 'Floresta distorcida' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 90.00 THEN\n                    CALL inserir_inst_mob('Enderman', 40, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n        END IF;\n\n        -- Fim\n        IF chunk_rec.nome_mapa = 'Fim' THEN\n            IF chunk_rec.nome_bioma = 'Ilha do fim' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 90.00 THEN\n                    CALL inserir_inst_mob('Enderman', 40, chunk_rec.numero, chunk_rec.nome_mapa, NULL);\n                END IF;\n            END IF;\n        END IF;\n\n    END LOOP;\nEND\n$$;\n\n-- Tabela Inst\u00e2ncia Fonte\nDO\n$$\nDECLARE\n    chunk_rec RECORD;\n    rand_num FLOAT;\nBEGIN\n    -- Iterando por todos os chunks na tabela Chunk\n    FOR chunk_rec IN \n        SELECT numero, nome_bioma, nome_mapa \n        FROM Chunk\n    LOOP\n        -- Superf\u00edcie\n        IF chunk_rec.nome_mapa = 'Superf\u00edcie' THEN\n            -- \u00c1rvore (gerada em Floresta e Selva, raramente em Plan\u00edcies)\n            IF chunk_rec.nome_bioma IN ('Floresta', 'Selva') THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 70.00 THEN\n                    CALL inserir_inst_fonte('\u00c1rvore', 24, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            ELSIF chunk_rec.nome_bioma = 'Plan\u00edcie' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 10.00 THEN\n                    CALL inserir_inst_fonte('\u00c1rvore', 24, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n\n            -- Pedreira (gerada raramente em todos os biomas, mais comumente em Montanhas)\n            rand_num := random() * 100;\n            IF chunk_rec.nome_bioma = 'Montanha' THEN\n                IF rand_num &lt;= 50.00 THEN\n                    CALL inserir_inst_fonte('Pedreira', 16, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            ELSE\n                IF rand_num &lt;= 15.00 THEN  -- Raramente em outros biomas\n                    CALL inserir_inst_fonte('Pedreira', 16, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n\n            -- Duna e Campo de Cana de A\u00e7\u00facar (gerada no Deserto)\n            IF chunk_rec.nome_bioma = 'Deserto' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 50.00 THEN\n                    CALL inserir_inst_fonte('Duna', 16, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n\n                rand_num := random() * 100;\n                IF rand_num &lt;= 30.00 THEN\n                    CALL inserir_inst_fonte('Campo de Cana de A\u00e7\u00facar', 5, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n\n            -- Cardume (gerado no Lago)\n            IF chunk_rec.nome_bioma = 'Lago' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 60.00 THEN\n                    CALL inserir_inst_fonte('Cardume', 5, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n\n            -- Jazida de Carv\u00e3o (gerada nas Montanhas)\n            IF chunk_rec.nome_bioma = 'Montanha' THEN\n                rand_num := random() * 100;\n                IF rand_num &lt;= 35.00 THEN\n                    CALL inserir_inst_fonte('Jazida de Carv\u00e3o', 24, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n\n        -- Cavernas\n        ELSIF chunk_rec.nome_mapa = 'Cavernas' THEN\n            IF chunk_rec.nome_bioma != 'Cidade ancestral' THEN\n                -- Jazida de Carv\u00e3o\n                rand_num := random() * 100;\n                IF rand_num &lt;= 40.00 THEN\n                    CALL inserir_inst_fonte('Jazida de Carv\u00e3o', 24, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n\n                -- Jazida de Ferro\n                rand_num := random() * 100;\n                IF rand_num &lt;= 50.00 THEN\n                    CALL inserir_inst_fonte('Jazida de Ferro', 10, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n\n                -- Dep\u00f3sito de Redstone\n                rand_num := random() * 100;\n                IF rand_num &lt;= 25.00 THEN\n                    CALL inserir_inst_fonte('Dep\u00f3sito de Redstone', 16, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n\n                -- Jazida de Ouro\n                rand_num := random() * 100;\n                IF rand_num &lt;= 20.00 THEN\n                    CALL inserir_inst_fonte('Jazida de Ouro', 8, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n\n                -- Veio de Diamante\n                rand_num := random() * 100;\n                IF rand_num &lt;= 10.00 THEN\n                    CALL inserir_inst_fonte('Veio de Diamante', 5, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n\n        -- Nether\n        ELSIF chunk_rec.nome_mapa = 'Nether' THEN\n            IF chunk_rec.nome_bioma = 'Descampado' THEN\n                -- Dep\u00f3sito de Netherita\n                rand_num := random() * 100;\n                IF rand_num &lt;= 5.00 THEN\n                    CALL inserir_inst_fonte('Dep\u00f3sito de Netherita', 5, chunk_rec.numero, chunk_rec.nome_mapa);\n                END IF;\n            END IF;\n        END IF;\n    END LOOP;\nEND\n$$;\n\n\n-- Tabela Inst\u00e2ncia Contruivel\nDO\n$$\nDECLARE\n    chunk_rec RECORD;\n    rand_num FLOAT;\n    vila_existente INTEGER;\nBEGIN\n    -- Iterando por todos os chunks na tabela Chunk\n    FOR chunk_rec IN \n        SELECT numero, nome_bioma, nome_mapa \n        FROM Chunk\n    LOOP\n        -- Verificar se existe uma Vila no chunk\n        SELECT COUNT(*) INTO vila_existente\n        FROM InstanciaEstrutura\n        WHERE nome_estrutura = 'Vila' AND numero_chunk = chunk_rec.numero AND nome_mapa = chunk_rec.nome_mapa;\n\n        -- Se houver uma Vila no chunk\n        IF vila_existente &gt; 0 THEN\n            -- Fazenda\n            rand_num := random() * 100;\n            IF rand_num &lt;= 30.00 THEN\n                CALL inserir_inst_construivel('Fazenda', chunk_rec.numero, chunk_rec.nome_mapa);\n            END IF;\n\n            -- Fornalha\n            rand_num := random() * 100;\n            IF rand_num &lt;= 10.00 THEN\n                CALL inserir_inst_construivel('Fornalha', chunk_rec.numero, chunk_rec.nome_mapa);\n            END IF;\n\n            -- Biblioteca\n            rand_num := random() * 100;\n            IF rand_num &lt;= 7.00 THEN\n                CALL inserir_inst_construivel('Biblioteca', chunk_rec.numero, chunk_rec.nome_mapa);\n            END IF;\n        END IF;\n\n        -- Portais de Viagem\n        rand_num := random() * 100;\n        IF rand_num &lt;= 1.00 THEN  -- probabilidade extremamente rara\n            CALL inserir_inst_construivel('Portal de Viagem', chunk_rec.numero, chunk_rec.nome_mapa);\n        END IF;\n\n    END LOOP;\nEND\n$$;\n\n</code></pre>"},{"location":"modulo_3/tigger_sp/","title":"tigger_sp","text":""},{"location":"modulo_3/tigger_sp/#codigo","title":"C\u00f3digo","text":"<pre><code>--------------------------------------------------------------------------------------------------------\n-------------------------------- GENERALIZA\u00c7\u00c3O/ESPECIALIZA\u00c7\u00c3O DE ITENS ---------------------------------\n--------------------------------------------------------------------------------------------------------\n\n--- REMOVE A PERMISS\u00c3O DE INSERIR DIRETAMENTE NAS TABELAS\n\nREVOKE INSERT ON Item FROM PUBLIC;\nREVOKE INSERT ON Alimento FROM PUBLIC;\nREVOKE INSERT ON Craftavel FROM PUBLIC;\nREVOKE INSERT ON ArmaduraDuravel FROM PUBLIC;\nREVOKE INSERT ON FerramentaDuravel FROM PUBLIC;\nREVOKE INSERT ON Funcional FROM PUBLIC;\n\n--- REMOVE A PERMISS\u00c3O DE DELETAR DIRETAMENTE NAS TABELAS ESPEC\u00cdFICAS\n\nREVOKE DELETE ON Alimento FROM PUBLIC;\nREVOKE DELETE ON Craftavel FROM PUBLIC;\nREVOKE DELETE ON ArmaduraDuravel FROM PUBLIC;\nREVOKE DELETE ON FerramentaDuravel FROM PUBLIC;\nREVOKE DELETE ON Funcional FROM PUBLIC;\n\n--- STORED PROCEDURE PARA INSERIR NAS TABELAS\n\nCREATE OR REPLACE PROCEDURE inserir_item(\n    p_nome VARCHAR(30),\n    p_tipo_item tipo_item,\n    p_pts_fome INT DEFAULT NULL,\n    p_tipo_craftavel tipo_craftavel DEFAULT NULL,\n    p_funcao TEXT DEFAULT NULL,\n    p_durabilidade_total INT DEFAULT NULL,\n    p_pts_dano INT DEFAULT NULL,\n    p_pts_armadura INT DEFAULT NULL\n)\nAS $inserir_item$\nBEGIN\n    INSERT INTO Item(nome, tipo_item)\n    VALUES(p_nome, p_tipo_item);\n\n    IF p_tipo_item = 'craftavel' THEN\n        INSERT INTO Craftavel(nome_item, tipo_craftavel)\n        VALUES (p_nome, p_tipo_craftavel);\n\n        IF p_tipo_craftavel = 'funcional' THEN\n            INSERT INTO Funcional(nome_item, funcao)\n            VALUES (p_nome, p_funcao);\n\n        ELSIF p_tipo_craftavel = 'ferramenta' THEN\n            INSERT INTO FerramentaDuravel(nome_item, durabilidade_total, pts_dano)\n            VALUES (p_nome, p_durabilidade_total, p_pts_dano);\n\n        ELSIF p_tipo_craftavel = 'armadura' THEN\n            INSERT INTO ArmaduraDuravel(nome_item, pts_armadura, durabilidade_total)\n            VALUES (p_nome, p_pts_armadura, p_durabilidade_total);\n\n        ELSIF p_tipo_craftavel = 'material' THEN\n            NULL;\n\n        ELSE\n            RAISE EXCEPTION 'Tipo de item desconhecido: %. Deve ser \"craftavel\", \"alimento\" ou \"material\".', p_tipo_craftavel;\n        END IF;\n\n    ELSIF p_tipo_item = 'alimento' THEN\n        INSERT INTO Alimento(nome_item, pts_fome)\n        VALUES (p_nome, p_pts_fome);\n\n    ELSIF p_tipo_item = 'material' THEN\n        NULL;\n\n    ELSE\n        RAISE EXCEPTION 'Tipo de item desconhecido: %. Deve ser \"craftavel\", \"alimento\" ou \"material\".', p_tipo_item;\n    END IF;\nEND\n$inserir_item$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- TRIGGER E STORED PROCEDURE PARA DELETAR ITEM\n\nCREATE OR REPLACE FUNCTION deletar_item()\nRETURNS trigger \nAS $deletar_item$\nBEGIN\n\n    IF (OLD.tipo_item = 'craftavel') THEN\n        DELETE FROM Craftavel\n        WHERE nome_item = OLD.nome;\n    END IF;\n\n    IF (OLD.tipo_item = 'alimento') THEN\n        DELETE FROM Alimento\n        WHERE nome_item = OLD.nome;\n    END IF;\n\n    RETURN OLD;\n\nEND;\n$deletar_item$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER deletar_item\nBEFORE DELETE ON Item\nFOR EACH ROW EXECUTE PROCEDURE deletar_item();\n\n--- TRIGGER E STORED PROCEDURE PARA DELETAR ITEM CRAFTAVEL\n\nCREATE OR REPLACE FUNCTION deletar_item_craftavel()\nRETURNS trigger \nAS $deletar_item_craftavel$\nBEGIN\n\n    IF (OLD.tipo_craftavel = 'funcional') THEN\n        DELETE FROM Funcional\n        WHERE nome_item = OLD.nome_item;\n\n    ELSIF (OLD.tipo_craftavel = 'ferramenta') THEN\n        DELETE FROM FerramentaDuravel\n        WHERE nome_item = OLD.nome_item;\n\n    ELSIF (OLD.tipo_craftavel = 'armadura') THEN\n        DELETE FROM ArmaduraDuravel\n        WHERE nome_item = OLD.nome_item;\n\n    ELSIF (OLD.tipo_craftavel = 'material') THEN\n        NULL;\n\n    ELSE\n        RAISE EXCEPTION 'Erro ao deletar. O tipo est\u00e1 errado.';         \n    END IF;\n\n    RETURN OLD;\n\nEND;\n$deletar_item_craftavel$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER deletar_item_craftavel\nBEFORE DELETE ON Craftavel\nFOR EACH ROW EXECUTE PROCEDURE deletar_item_craftavel();\n\n--- TRIGGER E STORED PROCEDURE PARA IMPEDIR DE ATUALIZAR O TIPO DA TABELA ITEM\n\nCREATE OR REPLACE FUNCTION prevencao_update_tipo_item()\nRETURNS trigger \nAS $prevencao_update_tipo_item$\nBEGIN\n\n    IF (OLD.tipo_item &lt;&gt; NEW.tipo_item) THEN\n        RAISE EXCEPTION 'N\u00e3o \u00e9 permitido alterar o tipo de item.';\n    END IF;\n\n    RETURN NEW;\n\nEND;\n$prevencao_update_tipo_item$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER prevencao_update_tipo_item\nBEFORE UPDATE ON Item\nFOR EACH ROW EXECUTE PROCEDURE prevencao_update_tipo_item();\n\n--- TRIGGER E STORED PROCEDURE PARA IMPEDIR DE ATUALIZAR O TIPO DA TABELA CRAFTAVEL\n\nCREATE OR REPLACE FUNCTION prevencao_update_tipo_item_craftavel()\nRETURNS trigger \nAS $prevencao_update_tipo_item_craftavel$\nBEGIN\n\n    IF (OLD.tipo_craftavel &lt;&gt; NEW.tipo_craftavel) THEN\n        RAISE EXCEPTION 'N\u00e3o \u00e9 permitido alterar o tipo de item craft\u00e1vel.';\n    END IF;\n\n    RETURN NEW;\n\nEND;\n$prevencao_update_tipo_item_craftavel$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER prevencao_update_tipo_item_craftavel\nBEFORE UPDATE ON Craftavel\nFOR EACH ROW EXECUTE PROCEDURE prevencao_update_tipo_item_craftavel();\n\n--------------------------------------------------------------------------------------------------------\n-------------------------------- GENERALIZA\u00c7\u00c3O/ESPECIALIZA\u00c7\u00c3O DE MOBS ----------------------------------\n--------------------------------------------------------------------------------------------------------\n\n--- REMOVE A PERMISS\u00c3O DE INSERIR DIRETAMENTE NAS TABELAS\n\nREVOKE INSERT ON Mob FROM PUBLIC;\nREVOKE INSERT ON Agressivo FROM PUBLIC;\nREVOKE INSERT ON Pacifico FROM PUBLIC;\nREVOKE INSERT ON NPC FROM PUBLIC;\n\n--- REMOVE A PERMISS\u00c3O DE DELETAR DIRETAMENTE NAS TABELAS ESPEC\u00cdFICAS\n\nREVOKE DELETE ON Agressivo FROM PUBLIC;\nREVOKE DELETE ON Pacifico FROM PUBLIC;\nREVOKE DELETE ON NPC FROM PUBLIC;\n\n--- STORED PROCEDURE PARA INSERIR NAS TABELAS\n\nCREATE OR REPLACE PROCEDURE inserir_mob(\n    p_nome VARCHAR(30),\n    p_tipo_mob tipo_mob,\n    p_impulsivo BOOLEAN DEFAULT NULL,\n    p_pts_dano INT DEFAULT NULL,\n    p_vida_max INT DEFAULT NULL,\n    p_tipo_pacifico tipo_pacifico DEFAULT NULL\n)\nAS $inserir_mob$\nBEGIN\n    INSERT INTO Mob(nome, tipo_mob)\n    VALUES(p_nome, p_tipo_mob);\n\n    IF p_tipo_mob = 'pacifico' THEN\n        INSERT INTO Pacifico(nome_mob, vida_max, tipo_pacifico)\n        VALUES(p_nome, p_vida_max, p_tipo_pacifico);\n\n        IF p_tipo_pacifico = 'NPC' THEN\n            INSERT INTO NPC(nome_pacifico)\n            VALUES(p_nome);\n\n        ELSIF p_tipo_pacifico = 'outro' THEN\n            NULL;\n\n        ELSE\n            RAISE EXCEPTION 'Tipo de mob pacifico desconhecido: %. Deve ser \"NPC\" ou \"outro\".', p_tipo_pacifico;\n        END IF;\n\n    ELSIF p_tipo_mob = 'agressivo' THEN\n        INSERT INTO Agressivo(nome_mob, impulsivo, pts_dano, vida_max)\n        VALUES(p_nome, p_impulsivo, p_pts_dano, p_vida_max);\n\n    ELSE\n        RAISE EXCEPTION 'Tipo de mob desconhecido: %. Deve ser \"pacifico\" ou \"agressivo\".', p_tipo_mob;\n    END IF;\nEND\n$inserir_mob$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- TRIGGER E STORED PROCEDURE PARA DELETAR MOB\n\nCREATE OR REPLACE FUNCTION deletar_mob()\nRETURNS trigger \nAS $deletar_mob$\nBEGIN\n\n    IF (OLD.tipo_mob = 'pacifico') THEN\n        DELETE FROM Pacifico\n        WHERE nome_mob = OLD.nome;\n    END IF;\n\n    IF (OLD.tipo_mob = 'agressivo') THEN\n        DELETE FROM Agressivo\n        WHERE nome_mob = OLD.nome;\n    END IF;\n\n    RETURN OLD;\n\nEND;\n$deletar_mob$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER deletar_mob\nBEFORE DELETE ON Mob\nFOR EACH ROW EXECUTE PROCEDURE deletar_mob();\n\n--- TRIGGER E STORED PROCEDURE PARA DELETAR MOB PACIFICO\n\nCREATE OR REPLACE FUNCTION deletar_mob_pacifico()\nRETURNS trigger \nAS $deletar_mob_pacifico$\nBEGIN\n\n    IF (OLD.tipo_mob = 'NPC') THEN\n        DELETE FROM Pacifico\n        WHERE nome_pacifico = OLD.nome_mob;\n\n    ELSIF (OLD.tipo_mob = 'outro') THEN\n        NULL;\n\n    ELSE\n        RAISE EXCEPTION 'Erro ao deletar. O tipo est\u00e1 errado.';         \n    END IF;\n\n    RETURN OLD;\n\nEND;\n$deletar_mob_pacifico$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER deletar_mob_pacifico\nBEFORE DELETE ON Pacifico\nFOR EACH ROW EXECUTE PROCEDURE deletar_mob_pacifico();\n\n--- TRIGGER E STORED PROCEDURE PARA IMPEDIR DE ATUALIZAR O TIPO DA TABELA MOB\n\nCREATE OR REPLACE FUNCTION prevencao_update_tipo_mob()\nRETURNS trigger \nAS $prevencao_update_tipo_mob$\nBEGIN\n\n    IF (OLD.tipo_mob &lt;&gt; NEW.tipo_mob) THEN\n        RAISE EXCEPTION 'N\u00e3o \u00e9 permitido alterar o tipo de mob.';\n    END IF;\n\n    RETURN NEW;\n\nEND;\n$prevencao_update_tipo_mob$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER prevencao_update_tipo_mob\nBEFORE UPDATE ON Mob\nFOR EACH ROW EXECUTE PROCEDURE prevencao_update_tipo_mob();\n\n--- TRIGGER E STORED PROCEDURE PARA IMPEDIR DE ATUALIZAR O TIPO DA TABELA PACIFICO\n\nCREATE OR REPLACE FUNCTION prevencao_update_tipo_pacifico()\nRETURNS trigger \nAS $prevencao_update_tipo_pacifico$\nBEGIN\n\n    IF (OLD.tipo_pacifico &lt;&gt; NEW.tipo_pacifico) THEN\n        RAISE EXCEPTION 'N\u00e3o \u00e9 permitido alterar o tipo de mob pac\u00edfico.';\n    END IF;\n\n    RETURN NEW;\n\nEND;\n$prevencao_update_tipo_pacifico$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER prevencao_update_tipo_pacifico\nBEFORE UPDATE ON Pacifico\nFOR EACH ROW EXECUTE PROCEDURE prevencao_update_tipo_pacifico();\n\n--- CHECAR EXIST\u00caNCIA NA TABELA PACIFICO\n\nCREATE OR REPLACE FUNCTION check_existe_pacifico() RETURNS trigger \nAS $check_existe_pacifico$\nBEGIN\n    PERFORM * FROM Pacifico WHERE nome_mob = NEW.nome_mob;\n    IF FOUND THEN\n        RAISE EXCEPTION 'Este mob j\u00e1 existe na tabela Pacifico.';\n    END IF;\n\n    RETURN NEW;\nEND;\n$check_existe_pacifico$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER check_existe_pacifico\nBEFORE INSERT ON Agressivo\nFOR EACH ROW EXECUTE PROCEDURE check_existe_pacifico();\n\n--- CHECAR EXIST\u00caNCIA NA TABELA AGRESSIVO\n\nCREATE OR REPLACE FUNCTION check_existe_agressivo() RETURNS trigger \nAS $check_existe_agressivo$\nBEGIN\n    PERFORM * FROM Agressivo WHERE nome_mob = NEW.nome_mob;\n    IF FOUND THEN\n        RAISE EXCEPTION 'Este mob j\u00e1 existe na tabela Agressivo.';\n    END IF;\n\n    RETURN NEW;\nEND;\n$check_existe_agressivo$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE OR REPLACE TRIGGER check_existe_agressivo\nBEFORE INSERT ON Pacifico\nFOR EACH ROW EXECUTE PROCEDURE check_existe_agressivo();\n\n--- CHECAR INSER\u00c7\u00c3O DA VIDA DO MOB NA TABELA \n\nCREATE OR REPLACE FUNCTION checar_vida_mob() RETURNS trigger \nAS $checar_vida_mob$\nBEGIN\n\n    DECLARE \n        tipo_mob VARCHAR(30);\n        vida_max INT;\n    BEGIN\n\n        SELECT m.tipo_mob\n        INTO tipo_mob\n        FROM Mob m\n        WHERE m.nome = NEW.nome_mob;\n\n        IF tipo_mob = 'agressivo' THEN\n\n            SELECT a.vida_max \n            INTO vida_max\n            FROM Agressivo a\n            WHERE a.nome_mob = NEW.nome_mob;\n\n            IF NEW.vida_atual &gt; vida_max THEN\n                RAISE EXCEPTION 'A vida atual (%) n\u00e3o pode ser maior que a vida m\u00e1xima (%) para o mob agressivo %.', \n                    NEW.vida_atual, vida_max, NEW.nome_mob;\n            END IF;\n\n        ELSIF tipo_mob = 'pacifico' THEN\n\n            SELECT p.vida_max \n            INTO vida_max\n            FROM Pacifico p\n            WHERE p.nome_mob = NEW.nome_mob;\n\n            IF NEW.vida_atual &gt; vida_max THEN\n                RAISE EXCEPTION 'A vida atual (%) n\u00e3o pode ser maior que a vida m\u00e1xima (%) para o mob pac\u00edfico %.', \n                    NEW.vida_atual, vida_max, NEW.nome_mob;\n            END IF;\n\n        ELSE \n            RAISE EXCEPTION 'Tipo de mob % n\u00e3o \u00e9 v\u00e1lido.', tipo_mob;\n        END IF;\n\n        RETURN NEW;\n    END;\nEND;\n$checar_vida_mob$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER checar_vida_mob\nBEFORE INSERT OR UPDATE ON InstanciaMob\nFOR EACH ROW\nEXECUTE FUNCTION checar_vida_mob();\n\n--------------------------------------------------------------------------------------------------------\n---------------------------------- MANIPULA\u00c7\u00c3O DE TABELAS INST\u00c2NCIA ------------------------------------\n--------------------------------------------------------------------------------------------------------\n\n--- INSERIR INST\u00c2NCIA DE MOB\n\nCREATE OR REPLACE PROCEDURE inserir_inst_mob(\n    nome_mob VARCHAR,\n    vida_atual INT,\n    numero_chunk INT,\n    nome_mapa VARCHAR,\n    id_estrutura INT\n)\nAS $$\nBEGIN\n    -- Inserir o mob na tabela InstanciaMob\n    INSERT INTO InstanciaMob (nome_mob, vida_atual, numero_chunk, nome_mapa, id_estrutura)\n    VALUES (nome_mob, vida_atual, numero_chunk, nome_mapa, id_estrutura);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- INSERIR INST\u00c2NCIA DE ESTRUTURA\n\nCREATE OR REPLACE PROCEDURE inserir_inst_estrutura(\n    nome_estrutura VARCHAR,\n    nome_bioma VARCHAR,\n    numero_chunk INT,\n    nome_mapa VARCHAR,\n    OUT nova_estrutura_id INT\n)\nAS $$\nBEGIN\n    -- Inserir a estrutura na tabela InstanciaEstrutura\n    INSERT INTO InstanciaEstrutura (nome_estrutura, nome_bioma, numero_chunk, nome_mapa)\n    VALUES (nome_estrutura, nome_bioma, numero_chunk, nome_mapa)\n    RETURNING id_inst_estrutura INTO nova_estrutura_id;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- INSERIR INST\u00c2NCIA DE FONTE\n\nCREATE OR REPLACE PROCEDURE inserir_inst_fonte(\n    nome_fonte VARCHAR, \n    qtd_atual INT, \n    numero_chunk INT, \n    nome_mapa VARCHAR\n)\nAS $$\nBEGIN\n    -- Inserir uma inst\u00e2ncia de fonte no chunk\n    INSERT INTO InstanciaFonte (nome_fonte, qtd_atual, numero_chunk, nome_mapa)\n    VALUES (nome_fonte, qtd_atual, numero_chunk, nome_mapa);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- INSERIR INST\u00c2NCIA DE CONSTRU\u00cdVEL\n\nCREATE OR REPLACE PROCEDURE inserir_inst_construivel(\n    nome_construivel VARCHAR,\n    numero_chunk INT,\n    nome_mapa VARCHAR\n)\nAS\n$$\nBEGIN\n    -- Inserir inst\u00e2ncia do constru\u00edvel\n    INSERT INTO InstanciaConstruivel (nome_construivel, numero_chunk, nome_mapa)\n    VALUES (nome_construivel, numero_chunk, nome_mapa);\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--------------------------------------------------------------------------------------------------------\n------------------------------------ PROCEDURES PARA A GAMEPLAY  ---------------------------------------\n--------------------------------------------------------------------------------------------------------\n\n--- SPAWN DE MOBS AGRESSIVOS NA SUPERF\u00cdCIE AO ANOITECER\nCREATE OR REPLACE PROCEDURE spawn_mobs_agressivos() \nAS $$\nDECLARE\n    chunk_rec RECORD;\n    rand_num FLOAT;\nBEGIN\n    -- Iterando por todos os chunks no mapa \"Superf\u00edcie\" para spawnar mobs agressivos \u00e0 noite\n    FOR chunk_rec IN \n        SELECT numero, nome_bioma \n        FROM Chunk\n        WHERE nome_mapa = 'Superf\u00edcie'\n    LOOP\n        -- Zumbi (spawn em Plan\u00edcie, Floresta, P\u00e2ntano e Deserto)\n        IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Floresta', 'P\u00e2ntano', 'Deserto') THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 70.00 THEN\n                CALL inserir_inst_mob('Zumbi', 20, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n        -- Esqueleto (spawn em Plan\u00edcie, Montanha, Floresta e Deserto)\n        IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Montanha', 'Floresta', 'Deserto') THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 60.00 THEN\n                CALL inserir_inst_mob('Esqueleto', 20, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n        -- Aranha (spawn em Floresta, P\u00e2ntano e Deserto)\n        IF chunk_rec.nome_bioma IN ('Floresta', 'P\u00e2ntano', 'Deserto') THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 50.00 THEN\n                CALL inserir_inst_mob('Aranha', 16, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n        -- Enderman (spawn em Plan\u00edcie, Deserto)\n        IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Deserto') THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 10.00 THEN\n                CALL inserir_inst_mob('Enderman', 40, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n        -- Creeper (spawn em Floresta, Plan\u00edcie e Deserto)\n        IF chunk_rec.nome_bioma IN ('Floresta', 'Plan\u00edcie', 'Deserto') THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 30.00 THEN\n                CALL inserir_inst_mob('Creeper', 20, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n        -- Bruxa (spawn em P\u00e2ntano)\n        IF chunk_rec.nome_bioma = 'P\u00e2ntano' THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 7.00 THEN\n                CALL inserir_inst_mob('Bruxa', 26, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n        -- Saqueador (spawn em Plan\u00edcie, Montanha e Deserto)\n        IF chunk_rec.nome_bioma IN ('Plan\u00edcie', 'Montanha', 'Deserto') THEN\n            rand_num := random() * 100;\n            IF rand_num &lt;= 10.00 THEN\n                CALL inserir_inst_mob('Saqueador', 24, chunk_rec.numero, 'Superf\u00edcie', NULL);\n            END IF;\n        END IF;\n\n    END LOOP;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- DESPAWN DE MOBS AGRESSIVOS NA SUPERF\u00cdCIE AO AMANHECER, APENAS MOBS FORA DE ESTRUTURAS\nCREATE OR REPLACE PROCEDURE despawn_mobs_agressivos() \nAS $$\nBEGIN\n    DELETE FROM InstanciaMob\n    WHERE nome_mob IN ('Zumbi', 'Esqueleto', 'Aranha', 'Enderman', 'Creeper', 'Bruxa', 'Saqueador')\n    AND nome_mapa = 'Superf\u00edcie'\n    AND id_estrutura IS NULL;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- ATUALIZA\u00c7\u00c3O DO CICLO DO DIA\nCREATE OR REPLACE PROCEDURE atualizar_ciclo_dia() \nAS \n$$\nDECLARE\n    hora_atual ciclo_dia;  -- Declara uma vari\u00e1vel para armazenar o valor atual da hora\nBEGIN\n    -- Atualiza o ciclo do dia apenas para o mapa 'Superficie'\n    UPDATE Mapa\n    SET hora = CASE\n        WHEN hora = 'dia' THEN 'tarde'::ciclo_dia\n        WHEN hora = 'tarde' THEN 'noite'::ciclo_dia\n        WHEN hora = 'noite' THEN 'dia'::ciclo_dia\n        ELSE 'dia'::ciclo_dia\n    END\n    WHERE nome = 'Superf\u00edcie'\n    RETURNING hora INTO hora_atual;  -- Armazena a hora atualizada na vari\u00e1vel\n\n    -- Verifica o novo ciclo do dia e executa as a\u00e7\u00f5es apropriadas\n    IF hora_atual = 'noite' THEN\n        -- Se for noite, spawna mobs agressivos\n        CALL  spawn_mobs_agressivos();\n    ELSIF hora_atual = 'dia' THEN\n        -- Se for dia, remove mobs agressivos\n        CALL  despawn_mobs_agressivos();\n    END IF;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- FUNCTION PARA MOVER JOGADOR\n\nCREATE OR REPLACE FUNCTION mover_jogador(\n    p_nomeUser VARCHAR(30),\n    p_direcao VARCHAR(30),\n    p_novo_chunk INT\n) RETURNS TEXT\nAS $mover_jogador$\nBEGIN\n    IF p_novo_chunk IS NOT NULL THEN\n        -- Verifica se a dire\u00e7\u00e3o \u00e9 \"baixo\"\n        IF p_direcao = 'baixo' THEN\n            -- Atualiza o nome_mapa para \"Cavernas\"\n            UPDATE Jogador\n            SET nome_mapa = 'Cavernas'\n            WHERE nome = p_nomeUser;\n\n            -- Retorna uma mensagem de sucesso\n            RETURN 'Voc\u00ea se desceu para as Cavernas e agora est\u00e1 no chunk ' || p_novo_chunk || '.';\n\n        -- Verifica se a dire\u00e7\u00e3o \u00e9 \"cima\"\n        ELSIF p_direcao = 'cima' THEN\n            -- Atualiza o nome_mapa para \"Superf\u00edcie\"\n            UPDATE Jogador\n            SET nome_mapa = 'Superf\u00edcie'\n            WHERE nome = p_nomeUser;\n\n            -- Retorna uma mensagem de sucesso\n            RETURN 'Voc\u00ea retornou para a Superf\u00edcie e agora est\u00e1 no chunk ' || p_novo_chunk || '.';\n\n        -- Caso contr\u00e1rio, atualiza o chunk\n        ELSE\n            -- Atualiza o numero_chunk\n            UPDATE Jogador\n            SET numero_chunk = p_novo_chunk\n            WHERE nome = p_nomeUser;\n\n            -- Retorna uma mensagem de sucesso\n            RETURN 'Voc\u00ea se moveu para o ' || p_direcao || ' e agora est\u00e1 no chunk ' || p_novo_chunk || '.';\n\n        END IF;\n\n    ELSE\n        RETURN 'N\u00e3o \u00e9 poss\u00edvel ir para ' || p_direcao || '.';\n    END IF;\nEND;\n$mover_jogador$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- TRIGGER/STORED PROCEDURE PARA N\u00c3O PERMITIR INSERIR VALOR NULO NO CHUNK DO JOGADOR\n\nCREATE OR REPLACE FUNCTION verificar_chunk_jogador()\nRETURNS TRIGGER \nAS $verificar_chunk_jogador$\nBEGIN\n\n    IF NEW.numero_chunk IS NULL THEN\n        RAISE EXCEPTION 'O campo \"numero_chunk\" n\u00e3o pode ser NULL.';\n    END IF;\n\n    RETURN NEW;\nEND;\n$verificar_chunk_jogador$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE TRIGGER verificar_chunk_jogador\nBEFORE UPDATE ON Jogador\nFOR EACH ROW\nEXECUTE FUNCTION verificar_chunk_jogador();\n\n--- FUNCTION PARA VER MOBS\n\nCREATE OR REPLACE FUNCTION ver_mob(\n    p_nomeUser VARCHAR(30),\n    p_nomeMob VARCHAR(30)\n) \nRETURNS TABLE (\n    nome_mob VARCHAR(30),\n    tipo_mob tipo_mob,\n    vida_max INT,\n    vida_atual INT,\n    pts_dano INT\n)\nAS $ver_mob$\nBEGIN\n    RETURN QUERY\n    SELECT \n        Mob.nome AS nome_mob, \n        Mob.tipo_mob, \n        COALESCE(Agressivo.vida_max, Pacifico.vida_max) AS vida_max,  -- Seleciona a vida_max de Agressivo ou Pacifico\n        InstanciaMob.vida_atual, \n        Agressivo.pts_dano  -- Pega pts_dano apenas para mobs agressivos\n    FROM InstanciaMob\n    JOIN Mob ON InstanciaMob.nome_mob = Mob.nome\n    LEFT JOIN Agressivo ON Mob.nome = Agressivo.nome_mob\n    LEFT JOIN Pacifico ON Mob.nome = Pacifico.nome_mob\n    WHERE InstanciaMob.nome_mob = p_nomeMob\n    AND InstanciaMob.numero_chunk = (\n        SELECT numero_chunk FROM Jogador WHERE nome = p_nomeUser\n    );\nEND;\n$ver_mob$ LANGUAGE plpgsql SECURITY DEFINER;\n\n--- FUNCTION PARA CRAFTAR ITENS\n\nCREATE OR REPLACE FUNCTION craftar_item(\n    p_nomeUser VARCHAR(30), \n    p_nomeItem VARCHAR(30)\n) \nRETURNS TEXT\nAS $craftar_item$\nDECLARE\n    v_id_jogador INT;\n    v_receita RECORD;\n    v_itens_necessarios TEXT[];\n    v_quantidade_saida INT;\n    v_item VARCHAR(30);\n    v_qtd_necessaria INT;\n    v_qtd_no_inventario INT;\n    v_id_inst_item INT;\n    v_durabilidade_total INT;\n    v_item_removido INT;\n    v_itens_remover RECORD;\nBEGIN\n    -- Verificar se o item \u00e9 craft\u00e1vel\n    IF NOT EXISTS (SELECT 1 FROM Craftavel WHERE nome_item = p_nomeItem) THEN\n        RETURN 'Item ' || p_nomeItem || ' n\u00e3o pode ser craftado.';\n    END IF;\n\n    -- Consultar a receita do item na tabela ReceitaItem\n    SELECT item_1, item_2, item_3, item_4, item_5, item_6, item_7, item_8, item_9, quantidade\n    INTO v_receita\n    FROM ReceitaItem\n    WHERE nome_item = p_nomeItem;\n\n    IF v_receita IS NULL THEN\n        RETURN 'Receita para ' || p_nomeItem || ' n\u00e3o encontrada.';\n    END IF;\n\n    -- Guardar os itens da receita e a quantidade de sa\u00edda\n    v_itens_necessarios := ARRAY[v_receita.item_1, v_receita.item_2, v_receita.item_3, v_receita.item_4, \n                                 v_receita.item_5, v_receita.item_6, v_receita.item_7, v_receita.item_8, \n                                 v_receita.item_9];\n    v_itens_necessarios := array_remove(v_itens_necessarios, NULL); -- Remove NULLs da receita\n    v_quantidade_saida := v_receita.quantidade;\n\n    -- Pegar o id do jogador\n    SELECT id_jogador INTO v_id_jogador FROM Jogador WHERE nome = p_nomeUser;\n\n    IF v_id_jogador IS NULL THEN\n        RETURN 'Jogador ' || p_nomeUser || ' n\u00e3o encontrado.';\n    END IF;\n\n    -- Verificar se o jogador tem todos os materiais necess\u00e1rios\n    FOR v_itens_remover IN (SELECT DISTINCT unnest(v_itens_necessarios) AS item) LOOP\n        v_item := v_itens_remover.item;\n\n        -- Contar quantas vezes esse item espec\u00edfico aparece na receita\n        v_qtd_necessaria := (SELECT COUNT(*) FROM unnest(v_itens_necessarios) x WHERE x = v_item);\n\n        -- Verificar a quantidade dispon\u00edvel no invent\u00e1rio\n        SELECT COUNT(*) INTO v_qtd_no_inventario\n        FROM Inventario\n        JOIN InstanciaItem ON Inventario.id_inst_item = InstanciaItem.id_inst_item\n        WHERE Inventario.id_inventario = v_id_jogador\n        AND InstanciaItem.nome_item = v_item;\n\n        -- Comparar a quantidade dispon\u00edvel com a quantidade necess\u00e1ria\n        IF v_qtd_no_inventario &lt; v_qtd_necessaria THEN\n            RETURN 'Voc\u00ea n\u00e3o tem materiais suficientes para craftar ' || p_nomeItem || '. Faltam ' || (v_qtd_necessaria - v_qtd_no_inventario) || ' unidades de ' || v_item || '.';\n        END IF;\n    END LOOP;\n\n    -- Remover os itens do invent\u00e1rio necess\u00e1rios para o craft (somente a quantidade exata para um craft)\n    FOR v_itens_remover IN (SELECT DISTINCT unnest(v_itens_necessarios) AS item) LOOP\n        v_item := v_itens_remover.item;\n        v_qtd_necessaria := (SELECT COUNT(*) FROM unnest(v_itens_necessarios) x WHERE x = v_item);\n\n        -- Remover exatamente a quantidade necess\u00e1ria do invent\u00e1rio\n        v_item_removido := 0; -- Inicia um contador para itens removidos\n        FOR i IN 1..v_qtd_necessaria LOOP\n            -- Encontrar o id_inst_item para cada item e remover\n            SELECT id_inst_item INTO v_id_inst_item \n            FROM InstanciaItem \n            WHERE nome_item = v_item \n            AND id_inst_item IN (SELECT id_inst_item FROM Inventario WHERE id_inventario = v_id_jogador)\n            ORDER BY id_inst_item\n            LIMIT 1;\n\n            -- Remover do invent\u00e1rio e da inst\u00e2ncia\n            IF v_id_inst_item IS NOT NULL THEN\n                DELETE FROM Inventario WHERE id_inst_item = v_id_inst_item;\n                DELETE FROM InstanciaItem WHERE id_inst_item = v_id_inst_item;\n                v_item_removido := v_item_removido + 1; -- Incrementa a contagem de itens removidos\n            END IF;\n\n            -- Se j\u00e1 removemos a quantidade necess\u00e1ria de itens, sa\u00edmos do loop\n            IF v_item_removido &gt;= v_qtd_necessaria THEN\n                EXIT;\n            END IF;\n        END LOOP;\n    END LOOP;\n\n    -- Verificar se o item a ser craftado tem durabilidade (FerramentaDuravel ou ArmaduraDuravel)\n    IF EXISTS (SELECT 1 FROM FerramentaDuravel WHERE nome_item = p_nomeItem) THEN\n        -- Se for ferramenta dur\u00e1vel, pegar a durabilidade total\n        SELECT durabilidade_total INTO v_durabilidade_total FROM FerramentaDuravel WHERE nome_item = p_nomeItem;\n    ELSIF EXISTS (SELECT 1 FROM ArmaduraDuravel WHERE nome_item = p_nomeItem) THEN\n        -- Se for armadura dur\u00e1vel, pegar a durabilidade total\n        SELECT durabilidade_total INTO v_durabilidade_total FROM ArmaduraDuravel WHERE nome_item = p_nomeItem;\n    ELSE\n        -- Caso o item n\u00e3o tenha durabilidade, definir como NULL\n        v_durabilidade_total := NULL;\n    END IF;\n\n    -- Criar e adicionar o novo item craftado ao invent\u00e1rio do jogador\n    FOR i IN 1..v_quantidade_saida LOOP\n        INSERT INTO InstanciaItem (nome_item, durabilidade_atual) \n        VALUES (p_nomeItem, v_durabilidade_total) \n        RETURNING id_inst_item INTO v_id_inst_item;\n\n        INSERT INTO Inventario (id_inst_item, id_inventario)\n        VALUES (v_id_inst_item, v_id_jogador);\n    END LOOP;\n\n    -- Retorna mensagem de sucesso\n    RETURN 'Item ' || p_nomeItem || ' craftado com sucesso e adicionado ao invent\u00e1rio.';\nEND;\n$craftar_item$ LANGUAGE plpgsql SECURITY DEFINER;\n\n\n--- FUNCTION PARA CONSTRUIR CONSTRU\u00c7\u00c3O\n\nCREATE OR REPLACE FUNCTION construir_construcao(nome_jogador VARCHAR, nome_construcao VARCHAR)\nRETURNS TEXT AS $construir_construcao$\nDECLARE\n    chunk_atual INT;\n    mapa_atual VARCHAR(30);\n    construcao_existente RECORD;\n    receita_itens RECORD;\n    quantidade_no_inventario INT;\n    novo_portal_chunk_nether INT;\n    v_qtd_remover INT;\n    v_id_inst_item INT;\nBEGIN\n    -- 1. Obter a posi\u00e7\u00e3o atual do jogador (chunk atual e mapa)\n    SELECT Jogador.numero_chunk, Jogador.nome_mapa\n    INTO chunk_atual, mapa_atual\n    FROM Jogador\n    WHERE Jogador.nome = nome_jogador;\n\n    -- Verifica se o jogador foi encontrado\n    IF NOT FOUND THEN\n        RETURN 'Jogador n\u00e3o encontrado.';\n    END IF;\n\n    -- 2. Verificar se a constru\u00e7\u00e3o j\u00e1 existe no chunk\n    SELECT 1\n    INTO construcao_existente\n    FROM InstanciaConstruivel\n    WHERE nome_construivel = nome_construcao\n      AND numero_chunk = chunk_atual\n      AND nome_mapa = mapa_atual;\n\n    -- Se a constru\u00e7\u00e3o j\u00e1 existir, lan\u00e7ar uma exce\u00e7\u00e3o\n    IF FOUND THEN\n        RETURN 'J\u00e1 existe ' || nome_construcao || ' nesse chunk.';\n    END IF;\n\n    -- 3. Verificar se o nome da constru\u00e7\u00e3o est\u00e1 presente na tabela Construivel\n    IF nome_construcao = 'Portal do Nether' THEN\n        -- Inserir \"Portal do Nether\" na tabela Construivel se n\u00e3o estiver l\u00e1\n        IF NOT EXISTS (SELECT 1 FROM Construivel WHERE nome = 'Portal do Nether') THEN\n            INSERT INTO Construivel (nome, descricao) VALUES ('Portal do Nether', 'Um portal para o Nether.');\n        END IF;\n    END IF;\n\n    -- 4. Obter a receita da constru\u00e7\u00e3o\n    FOR receita_itens IN\n        SELECT item, quantidade\n        FROM ReceitaConstruivel\n        WHERE nome_construivel = nome_construcao\n    LOOP\n        -- 5. Verificar se o jogador tem os itens necess\u00e1rios\n        SELECT COUNT(*) INTO quantidade_no_inventario\n        FROM Inventario\n        JOIN InstanciaItem ON Inventario.id_inst_item = InstanciaItem.id_inst_item\n        WHERE InstanciaItem.nome_item = receita_itens.item\n          AND Inventario.id_inventario = (SELECT id_jogador FROM Jogador WHERE nome = nome_jogador);\n\n        -- Se o jogador n\u00e3o tiver o item ou quantidade insuficiente\n        IF quantidade_no_inventario &lt; receita_itens.quantidade THEN\n            RETURN 'Voc\u00ea n\u00e3o possui itens suficientes para construir ' || nome_construcao || '.';\n        END IF;\n    END LOOP;\n\n    -- 5. Inserir a nova constru\u00e7\u00e3o no chunk\n    INSERT INTO InstanciaConstruivel (nome_construivel, numero_chunk, nome_mapa)\n    VALUES (nome_construcao, chunk_atual, mapa_atual);\n\n    -- 6. Se for um \"Portal do Nether\", criar um portal correspondente no Nether\n    IF nome_construcao = 'Portal do Nether' THEN\n        -- Gerar um chunk aleat\u00f3rio no mapa \"Nether\"\n        INSERT INTO InstanciaConstruivel (nome_construivel, numero_chunk, nome_mapa)\n        VALUES ('Portal do Nether', (SELECT FLOOR(random() * 900) + 1), 'Nether')\n        RETURNING numero_chunk INTO novo_portal_chunk_nether;\n\n        -- Garantir que o chunk no Nether existe na tabela Chunk\n        INSERT INTO Chunk (numero, nome_bioma, nome_mapa)\n        VALUES (novo_portal_chunk_nether, 'BiomaDesconhecido', 'Nether')\n        ON CONFLICT DO NOTHING;\n    END IF;\n\n    -- 7. Remover os itens usados do invent\u00e1rio de acordo com a quantidade exata necess\u00e1ria\n    FOR receita_itens IN\n        SELECT item, quantidade\n        FROM ReceitaConstruivel\n        WHERE nome_construivel = nome_construcao\n    LOOP\n        v_qtd_remover := receita_itens.quantidade;\n\n        -- Remover exatamente a quantidade necess\u00e1ria de cada item\n        FOR i IN 1..v_qtd_remover LOOP\n            -- Encontrar o id_inst_item para o item espec\u00edfico e remov\u00ea-lo\n            SELECT id_inst_item INTO v_id_inst_item\n            FROM InstanciaItem\n            WHERE nome_item = receita_itens.item\n              AND id_inst_item IN (SELECT id_inst_item FROM Inventario WHERE id_inventario = (SELECT id_jogador FROM Jogador WHERE nome = nome_jogador))\n            LIMIT 1;\n\n            -- Remover do invent\u00e1rio e da inst\u00e2ncia\n            DELETE FROM Inventario WHERE id_inst_item = v_id_inst_item;\n            DELETE FROM InstanciaItem WHERE id_inst_item = v_id_inst_item;\n        END LOOP;\n    END LOOP;\n\n    -- Retornar sucesso para a constru\u00e7\u00e3o (ap\u00f3s a remo\u00e7\u00e3o dos itens)\n    IF nome_construcao = 'Portal do Nether' THEN\n        RETURN 'Um novo portal foi criado no Nether, no chunk ' || novo_portal_chunk_nether || '.';\n    ELSE\n        RETURN 'Voc\u00ea construiu ' || nome_construcao || ' com sucesso!';\n    END IF;\n\nEND;\n$construir_construcao$ LANGUAGE plpgsql SECURITY DEFINER;\n\n</code></pre>"}]}